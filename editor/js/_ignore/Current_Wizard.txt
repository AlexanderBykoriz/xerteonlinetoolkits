import mx.controls.*;
import mx.managers.PopUpManager;
import mx.containers.Window;
import flash.net.FileReference;
import flash.external.ExternalInterface;

mdminit();

if (mdm != undefined){
	
	xerte = true;
	mdm.enableexithandler();
	
	btnSave.label = 'Save';
	btnSave.icon = 'icSave';
	
} else {
	
	xerte = false;
	
	//local connections for drawing tools
	editRec = new LocalConnection();
	editRec.getData = function(){
		var drawingData = tree.selectedNode.firstChild.nodeValue;
		editSend.send("drawRec", "initDrawing", drawingData, _root.rlovariable, 'web' );
	}
	editRec.setDrawingData = function(xml){
		setDrawingData(xml);
	}
	editRec.connect("editRec");
	editSend = new LocalConnection();
	
	btnSave.label = 'Publish';
	btnSave.icon = 'icWorld';
}

function onFormClose(wizard){
	
	for (var i = wizard.controls.length; i > 0; i--){
		wizard.controls[i].removeMovieClip();
		wizard.container.destroyObject(wizard.controls[i]);
	}
	
	if (wizard.browser != undefined){
		wizard.browser.close();
		delete wizard.browser;
	}
	
	wizard.container.destroyObject(wizard.controls[0]); //WTF?
	wizard.controls = new Array();
	
	saveFile();
	mdm.Forms.MainForm.show();
	mdm.Forms.wizard.hide();			
}

wizard = this;
wizard.FileLocation = "";
wizard.xmlStr = "";
wizard.fileName = "";
wizard.mediaLocation = mdm.System.Paths.desktop;
wizard.rloFile = "";
wizard.languageLoaded = false;
wizard.languageCode = "en-GB";
wizard.languageConfig = new XML();
wizard.languageXML = new XML();


function init(xml, rloFile, languageCode){ //the data, the .rlo file path and the languagecode to use

	mdm.Forms.MainForm.hide();
	if (languageCode != null && length(languageCode) >= 2)
	{
		wizard.languageCode=languageCode;
	}
	wizard.languageXML.ignoreWhite = true;
	wizard.languageXML.onLoad = function(success){
		//the engine will handle this - all we do here is load it.
		if (success == true){
			wizard.languageLoaded = true;
			wizard.languageData = this.toArrObject();//results of xml to object on the language file.
			//mdm.Prompt(wizard.languageData.language[0].name);
			wizard.currentLanguage = wizard.languageData.language[0].code;
			wizard.languageData = wizard.languageData.language[0];
			setTranslation();
		} else {
		}
	}
	
	wizard.languageConfig.ignoreWhite = true;
	wizard.languageConfig.onLoad = function(success){
		if (success == true){
			//t = this.toObject();
			for (var aNode:XMLNode=this.firstChild.firstChild; aNode != null; aNode = aNode.nextSibling)
			{
				if (aNode.attributes.code == wizard.languageCode) {
					//mdm.Prompt("loading " + 'languages/' + aNode.attributes.wizardfile);
					wizard.languageXML.load('languages/' + aNode.attributes.wizardfile);
					return;
				}
			}
			//mdm.Prompt("loading default " + 'languages/' + this.firstChild.firstChild.firstChild.attributes.wizardfile);
			wizard.languageCode = this.firstChild.firstChild.firstChild.attributes.code;
			wizard.languageXML.load('languages/' + this.firstChild.firstChild.firstChild.attributes.wizardfile);
			
		} else {
			//no language config
		}
	}
	wizard.languageConfig.load('languages/language-config.xml');
	
	showAdvanced = chkShowAdvanced.getValue();
	showLanguage = chkShowLanguage.getValue();

	if (wizard.container != undefined){
		wizard.container.removeMovieClip();
		delete wizard.container;
	}
	
	wizard.createEmptyMovieClip('container', 99);
	wizard.container._lockroot = true;

	this.FileLocation = rloFile.substr(0, rloFile.lastIndexOf('\\') + 1);
	
	//process the path (gotta be a better way...)
	xml = replace(xml, 'FileLocation', this.FileLocation);
	xml = replace(xml, " + '", '');
	xml = replace(xml, "'", "");
	
	wizard.fileName = xml;
	wizard.folderName = xml.substring(xml.lastIndexOf('\\') + 1, xml.lastIndexOf('.')); //a folder for any files for this KO instance
	wizard.rloFile = rloFile;
	
	if (xerte){
		var nfoFile = xml.split('.xml').join('.xwd');
	} else {
		var nfoFile = _root.originalpathvariable +  "wizards/" + languageCode + "/data.xwd";
	}
	
	//load the xml
	this.nfoData = new XML();
	this.nfoDate.attempt = 0;
	this.nfoData.ignoreWhite = true;
	
	this.nfoData.load(nfoFile + '?myvar=' + new Date().getTime());
	
	this.nfoData.onLoad = function (success){
		if (success){
			wizard.nfoObject = this.toObject();
			
			//now load the xml (KOData)
			KOData.load(xml + '?myvar=' + new Date().getTime());
		}
		else
		{
			this.attempt++;
			if (this.attempt == 1)
			{
				nfoFile = _root.originalpathvariable + "wizards/en-GB/data.xwd";
				this.load(nfoFile + '?myvar=' + new Date().getTime());
			}
			else
			{
				nfoFile = _root.originalpathvariable + "data.xwd";
				this.load(nfoFile + '?myvar=' + new Date().getTime());
			}
		}
		
	}
	
	//load the xml
	this.KOData = new XML();
	this.KOData.ignoreWhite = true;
	this.KOData.onData = function(src){
		
		this.loaded = true;
		//we need to override onLoad, because the parser replaces &lt; etc with the < in attributes,
		//and we want to protect html in attributes in the xml. The form controls replace < with &lt; 
		//in the xml, and it saves out fine, but reading it back through the parser screws it up
		//so we handle the onData event, switch out the &lt; for &-lt; in the string, parse the file 
		//inot the xml object and then recursively switch them back before manually firing onLoad. Phew.
		src = src.split('&lt;').join('&-lt;')
		src = src.split('&gt;').join('&-gt;')
		src = src.split('&quot;').join('&-quot;')
		src = src.split('&amp;').join('&-amp;')
		
		this.parseXML(src);
		
		formatAtts(this.firstChild);
		//done working around the parser - continue as before
        this.onLoad(true);

	}

	this.KOData.onLoad = function(success){
		
		tree.dataProvider = this;
		if(tree.dataProvider.firstChild.attributes['language'] == null)
		{
			tree.dataProvider.firstChild.attributes.language = wizard.languageCode;
		}
		tree.selectedNode = tree.getTreeNodeAt(0);
		tree.selectedIndex = 0;
		tree.setIsOpen(tree.selectedItem, true);
		tree.dispatchEvent({type: "change", target: tree});
		
		//open all icons?
		expandTreeNode(tree.getItemAt(0));
		
		//make sure the preview window is the right size
		mdm.Forms.MainForm.callFunction('resizePreview', "", "|");	
		mdm.Forms.wizard.show();
		
		//make the insert menu for adding top level pages
		makeInsertMenu(tree.getTreeNodeAt(0).nodeName)	
	}
}



//setup tree
tree = dndtree.getTree();
tree.hScrollPolicy = 'auto';
tree.vScrollPolicy = 'auto';
tree.setStyle("openDuration", 0);
tree.maxHPosition = 300;
dndtree.dragFunction = function(source){
	return true;
}
dndtree.dropFunction = function(source, target){
	if (wizard.nfoObject.wizard[target.nodeName].newNodes[source.nodeName] != undefined){
		return true;
	}
	return false;
}
tree.labelFunction = function(item){
	if (item.nodeType != '3'){
		if (item.attributes.name != undefined){
			return item.attributes.name;
		}
		else
		{
			var lbl = wizard.nfoObject.wizard[item.nodeName].menuItem != undefined ? wizard.nfoObject.wizard[item.nodeName].menuItem : item.nodeName;
			return lbl
		}
	}
}
tree.iconFunction = function(item){
	if (wizard.nfoObject.wizard[item.nodeName].icon != undefined){
		return wizard.nfoObject.wizard[item.nodeName].icon;
	}
	if (item.hasChildNodes() && item.firstChild.nodeType != '3'){
		return 'icFolder';
	} else {
		return 'icTemplate';
	}
}
this.tree.setStyle("disclosureClosedIcon", "icTreeClosed");
this.tree.setStyle("disclosureOpenIcon", "icTreeOpen");

//LISTENERS//////////////////////////////////////////////////////////////////////////////
treeListener = new Object();
treeListener.lastClickTime = getTimer();

treeListener.change = function(obj){
//refresh and display the existing properties on the data grid
	//open the node?
	if (getTimer() - this.lastClickTime < 350){ //if less than 350 milliseconds, a double click - so toggle the node,
		if (obj.target.selectedNode.firstChild.nodeType != '3'){
			obj.target.setIsOpen(obj.target.selectedNode, !obj.target.getIsOpen(obj.target.selectedNode));
		}
	}
	this.lastClickTime = getTimer();
	
	//clear old controls
	for (var i = wizard.controls.length; i > -1; i--){
		wizard.controls[i].removeMovieClip();
		wizard.container.destroyObject(wizard.controls[i]);
	}
	if (wizard.browser != undefined){
		wizard.browser.close();
		delete wizard.browser;
	}
	wizard.controls = new Array();
	
	wizard.container.removeMovieClip();
	delete wizard.container;
	
	wizard.createEmptyMovieClip('container', 99);
	wizard.container._lockroot = true;	
	
	//set upo the scrollpane
	scroller.contentPath = wizard.container._name;
	wizard.container = scroller.content;
	
	//enable / disable the clone and delete buttons
	if (wizard.nfoObject.wizard[tree.selectedNode.nodeName].duplicate == 'false'){
		btnDuplicate.enabled = false;
	} else {
		btnDuplicate.enabled = true;
	}
	
	//only allow deletion if it's not the last of it's type on it's parent...
	var nodeType = tree.selectedNode.nodeName;
	var count = 0;
	for (var i = 0; i < tree.selectedNode.parentNode.childNodes.length; i++){
		if (tree.selectedNode.parentNode.childNodes[i].nodeName == nodeType){
			count++;
		}
	}
	//allow deletion if there is more than one node (i.e. don't allow deletion of the last one unless remove == 'true'
	if (count > 1 || wizard.nfoObject.wizard[nodeType].remove == 'true'){
		btnDelete.enabled = true;
	} else {
		btnDelete.enabled = false;
	}
	//conversely if =  false, then no nodes can be deleted, as the structure is hard-coded
	if (wizard.nfoObject.wizard[nodeType].remove == 'false'){
		btnDelete.enabled = false;
	}

	intID = setInterval(makeForm,10,obj);
}
tree.addEventListener("change", treeListener);

//make form helper functions...
function addLabel(text, ctrlY, ctrlX){
	if (ctrlX == undefined) {
		ctrlX = 270;
	}
	var n = wizard.controls.length;
	wizard.container.createClassObject(Label,"ctrl"+n, 200 + n, {_x:ctrlX, _y:ctrlY, text: text});
	wizard.container["ctrl"+n].setSize(130,20);
	wizard.controls.push("ctrl"+n);
}
function addHelp(helpLink, ctrlY){
	//show an icon
	n = wizard.controls.length;
	wizard.container.attachMovie('icHelp', 'help'+n, 20 + n, {_x: 250, _y: ctrlY, useHandCursor:true, link: wizard.FileLocation + helpLink});
	wizard.controls.push("help"+n);
	addTooltip(wizard.container["help"+n], languageData.helpLink[0].tooltip);

	wizard.container["help"+n].onRelease = function(){
		launchAnchor(this.link);
	}
}
function addComponent(type, initObject){
	
	var n = wizard.controls.length;
	var comp = wizard.container.createClassObject(type,"ctrl"+n, 200 + n,initObject);
	wizard.controls.push("ctrl"+n);

	comp.addEventListener('click', comp);
	comp.addEventListener('change', comp);

	return comp;
}
function addMovieClip(libID, initObject){
	var n = wizard.controls.length;
	var comp = wizard.container.attachMovie(libID, 'ctrl' + n, n, initObject);
	wizard.controls.push('ctrl' + n);
	return comp;
}

function makeForm(obj){
	
	clearInterval(intID);
	
	//amke sure the scroller isn't left turned off
	scroller.vScrollPolicy = 'auto';
	
	//make sure this isn't orphaned from a control just hidden
	wizard.tooltip.removeMovieClip();
	
	//add all optional properties to the combo box for easy addition
	optProps.removeAll();
	
	//add in the optional properties
	tempArr = new Array();
	
	for (var i in wizard.nfoObject.wizard[obj.target.selectedNode.nodeName]){
		if (wizard.nfoObject.wizard[obj.target.selectedNode.nodeName][i].optional == 'true'){
			tempArr.push({label:wizard.nfoObject.wizard[obj.target.selectedNode.nodeName][i].label, data:i});
		}
	}
	tempArr.sortOn('label');
	
	for (var i = 0; i < tempArr.length; i++){
		optProps.enabled = true;
		optProps.addItem({label:tempArr[i].label, data:tempArr[i].data});
	}
	
	/*
	var optPropCount = 0;
	for (var i in wizard.nfoObject.wizard[obj.target.selectedNode.nodeName]){
		if (wizard.nfoObject.wizard[obj.target.selectedNode.nodeName][i].optional == 'true'){
			optPropCount++;
			optProps.enabled = true;
			optProps.addItem({label:wizard.nfoObject.wizard[obj.target.selectedNode.nodeName][i].label, data:i});
		}
	}
	*/
	if (optPropCount == 0){
		optProps.enabled = false;
		addProp.enabled = false;
		delProp.enabled = false;
	} else {
		optProps.enabled = true;
		addProp.enabled = true;
		delProp.enabled = true;
	}
	
	var ctrlY = 5;
	
	//if the name property exists, add it first, at the top of the form
	nodeInfo = wizard.nfoObject.wizard[obj.target.selectedNode.nodeName];
	
	if (nodeInfo['name'] != undefined){
		addLabel(nodeInfo['name'].label, ctrlY);
		var comp = addComponent(TextInput, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes});
		
		comp.text = attToHtml(obj.target.selectedNode.attributes['name']);
		
		if (nodeInfo[i].width != undefined){
			comp.setSize(Number(nodeInfo[i].width),22);
		} else {
			comp.setSize(380,22);
		}
		
		comp.change = function(obj){
			this.attributes['name'] = htmlToAtt(this.text);
		}
		comp.focusOut = function(obj){
			//only set attributes on children of the root node (if tree.selectedItem.parentNode == mainXMLObj.firstChild
			if (tree.selectedItem.parentNode == KOData.firstChild){
				if (mdm != undefined){
					mdm.Forms.MainForm.callFunction('setNameAttribute', this.text);
				}
			}
		}
		comp.addEventListener('focusOut', comp);
		ctrlY += 30;			
	}
			
	//if it's a text node put the text area before the remaining attributes controls
	if (nodeInfo.type.toLowerCase() == "text"){
		
		//add label, help and component
		addLabel(nodeInfo.label, ctrlY);
		if (nodeInfo.help != undefined){
			addHelp(nodeInfo.help, ctrlY);
		}

		var comp = addComponent(TextArea,  {_x:400, _y:ctrlY, wordWrap:true, hScrollPolicy:'off', treeNode: obj.target.selectedNode});

		comp.setSize(380, nodeInfo.height);

		//formatting functions
		comp.label.highlightHTML = highlightHTML;
		comp.label.highlight = highlight;
		
		//set the inital text
		comp.text = obj.target.selectedNode.firstChild.nodeValue;
		comp.redraw();
		comp.label.highlight(0, comp.label.text.length, '_sans');
		comp.menu = formatMenu;

		comp.change = function(obj){
			this.label.highlightHTML('_sans');
			this.treeNode.firstChild.nodeValue = this.text;
		}
		ctrlY += comp._height + 8;
	}
	//same same for code
	if (nodeInfo.type.toLowerCase() == "script"){
		
		scroller.vScrollPolicy = 'off';
		
		//add label, help and component
		addLabel(nodeInfo.label, ctrlY);
		if (nodeInfo.help != undefined){
			addHelp(nodeInfo.help, ctrlY);
		}

		//var comp = addComponent(TextArea,  {_x:400, _y:ctrlY, wordWrap:false, hScrollPolicy:'auto', treeNode: obj.target.selectedNode});
		var comp = addComponent(TextArea,  {_x:240, _y:0, wordWrap:false, hScrollPolicy:'auto', treeNode: obj.target.selectedNode});

		comp.setSize(560,524);// nodeInfo.height);
		comp.setStyle('fontFamily', 'Courier New');
		comp.setStyle('fontSize', 12);

		//formatting functions
		comp.label.highlightCode = highlightCode;
		comp.label.highlightSyntax = highlightSyntax;
		comp.label.highlightAllCode = highlightAllCode;
		
		//set the inital text
		comp.text = obj.target.selectedNode.firstChild.nodeValue;
		comp.redraw();
		comp.label.highlightAllCode();
		
		comp.change = function(obj){
			this.label.highlightCode('_sans');
			this.treeNode.firstChild.nodeValue = this.text;
		}
		comp.keyDown = function(){
			if (Key.isDown(Key.ESCAPE)){
				if (this._width > 400){
					this._x = 400; this._y = 40; this.setSize(380,nodeInfo.height);
				} else {
					this._x = 240; this._y = 0; this.setSize(560,524);
				}
				
			}
		}
		ctrlY += comp._height + 8;
	}
	
	if (nodeInfo.type.toLowerCase() == "html"){
		
		scroller.vScrollPolicy = 'off';
		
		if (obj.target.selectedNode.attributes.url != undefined){ //we hve a file - don't show the editor
		
				
		} else { //show the editor
		
			//add label, help and component
			addLabel(nodeInfo.label, ctrlY);
			if (nodeInfo.help != undefined){
				addHelp(nodeInfo.help, ctrlY);
			}
			
			//var comp = addComponent(TextArea,  {_x:400, _y:ctrlY, wordWrap:false, hScrollPolicy:'auto', treeNode: obj.target.selectedNode});
			var comp = addComponent(TextArea,  {_x:240, _y:0, wordWrap:false, hScrollPolicy:'auto', hScrollPolicy:'auto',treeNode: obj.target.selectedNode});
	
			comp.setSize(560,524);// nodeInfo.height);
			comp.setStyle('fontFamily', 'Courier New');
			comp.setStyle('fontSize', 12);
	
			//formatting functions
			comp.label.highlightHTML = highlightHTML;
			comp.label.highlight = highlight;
			
			//set the inital text
			comp.text = obj.target.selectedNode.firstChild.nodeValue;
			comp.redraw();
			comp.label.highlight(0, comp.label.text.length, 'Courier New');
			comp.menu = formatMenu;
	
			comp.change = function(obj){
				this.label.highlightHTML();
				this.treeNode.firstChild.nodeValue = this.text;
			}
			comp.keyDown = function(){
				if (Key.isDown(Key.ESCAPE)){
					if (this._width > 400){
						this._x = 400; this._y = 40; this.setSize(380,nodeInfo.height);
					} else {
						this._x = 240; this._y = 0; this.setSize(560,524);
					}
					
				}
			}
			ctrlY += comp._height + 8;
		
		}

	}
	
	if (nodeInfo.type.toLowerCase() == "drawing"){
		
		//label, help and component
		addLabel(nodeInfo.label, ctrlY);
		if (nodeInfo.help != undefined){
			addHelp(nodeInfo.help, ctrlY);
		}
		var comp = addComponent(Button, {_x:400, _y:ctrlY, label:'Edit...', treeNode: obj.target.selectedNode});

		comp.click = function(obj){
			if (xerte == true){
				mdm.Forms.drawing.show();
				//location for imported files
				var mediaFolder = wizard.fileName.substr(wizard.FileLocation.length);
				mediaFolder = mediaFolder.substr(0, mediaFolder.lastIndexOf('/') + 1);
				mdm.Forms.drawing.callFunction("init", this.treeNode.firstChild.nodeValue+"|"+wizard.FileLocation+"|wizard|"+mediaFolder, "|");
			} else {
				
				if(_root.apache!="false"){

						url = "drawing";			
						
				}else{
					
						url = "drawing.php";
					
				}
				
				ExternalInterface.call("hideunload");
				
			    getURL("javascript:NewWindow = window.open('" + url + "','previewwindow','height=680,width=800'); NewWindow.focus(); void(0);");
				
				ExternalInterface.call("setunload");
			}
		}
		ctrlY += 30;
	}
	
	if (nodeInfo.type.toLowerCase() == "hotspot"){
		
		addLabel(nodeInfo.label, ctrlY);
		if (nodeInfo.help != undefined){
			addHelp(nodeInfo.help, ctrlY);
		}
		
		var comp = addComponent(Button, {_x:400, _y:ctrlY, label:'Edit...', treeNode: obj.target.selectedNode});
		comp.click = function(obj){
			var hsObject = {node: this.treeNode, x: Number(this.treeNode.attributes.x), y: Number(this.treeNode.attributes.y), w: Number(this.treeNode.attributes.w), h: Number(this.treeNode.attributes.h)};
			var imageURL;
			if (this.treeNode.parentNode.attributes.url != undefined){
				imageURL = this.treeNode.parentNode.attributes.url;
			} else {
				imageURL = this.treeNode.parentNode.parentNode.attributes.url;
			}

			initPreview(imageURL, hsObject);
		}
		ctrlY += 30;
	}
	
	if (nodeInfo.type.toLowerCase() == "custom"){
		obj.target.selectedNode.custom = true;
		//load up the swf
		wizard.container.createEmptyMovieClip("custom", 0);
		wizard.container.custom._x = 240;
		wizard.container.custom._y = 0;
		var ldr = new MovieClipLoader();
		var path;
		if (!xerte){
			path = _root.originalpathvariable;
		} else {
			path = wizard.FileLocation;
		}
		ldr.loadClip(path + nodeInfo.swf, wizard.container.custom);
		
		//once loaded pass in the data
		ldr.onLoadInit = function(){
			wizard.container.custom.init(obj.target.selectedNode, obj.target);
		}
		ldr.addListener(ldr);
		
		ctrlY += Number(nodeInfo.height);
	}
	
	//what about it's attributes
	var atts = obj.target.selectedNode.attributes;
	
	//disable the sections toggles, enable them if this form has those options identified
	chkShowAdvanced.enabled = false;
	chkShowAdvanced.setTextColor(0xAAAAAA);
	chkShowLanguage.enabled = false;
	chkShowLanguage.setTextColor(0xAAAAAA);
	
	for (var i in atts){
		
		if (nodeInfo[i].advanced == 'true'){
			chkShowAdvanced.enabled = true;
			chkShowAdvanced.setTextColor(0x000000);
		}
		if (nodeInfo[i].language == 'true'){
			chkShowLanguage.enabled = true;
			chkShowLanguage.setTextColor(0x000000);
		}
				
		if ((nodeInfo[i].advanced == 'true' && showAdvanced != true) || (nodeInfo[i].language == 'true' && showLanguage != true)) continue;
		
		if (nodeInfo.type.toLowerCase() == "custom") break; //don't do atts for custom editors
		
		if (nodeInfo[i].divider == 'true'){
			wizard.container.lineStyle(0,0x999999,100);
			wizard.container.moveTo(270,ctrlY - 2);
			wizard.container.lineTo(790,ctrlY - 2);
			ctrlY += 8;
		}
		
		//hidden properties aren't rendered (i.e. hotspot x y w h);
		if (nodeInfo[i] == undefined){
			continue;
		}
		
		if (i != 'name'){
			//label & help - all get these
			addLabel(nodeInfo[i].label, ctrlY);
			if (nodeInfo[i].help != undefined){
				addHelp(nodeInfo[i].help, ctrlY);
			}
		}
		
		
		//if this is optional, adda delete button
		if (nodeInfo[i].optional == 'true'){
			comp = addMovieClip('icDelSmall', {_x:255, _y:ctrlY + 2, _width: 12, _height:12, attributes: obj.target.selectedNode.attributes, att: i});
			comp.att = i;
			comp.atts = atts;
			addTooltip(comp, wizard.languageData.icDelete[0].tooltip);
			comp.onRelease = function(){
				var del;
				if (xerte){
					del = mdm.Dialogs.promptAdv(wizard.languageData.icDelete[0].prompt, "confirm");
				} else {
					del = true;
				}
				if (del == true){
					delete this.attributes[this.att];
					clearInterval(ttID);
					wizard.tooltip.removeMovieClip();
					tree.dispatchEvent({type:'change', target:tree});
				}
			}
		}
		
		//set up the control for num spinners and combo boxes and textinput
		if (nodeInfo[i].type.toLowerCase() == 'combobox'){
			var comp = addComponent(ComboBox, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i });
			
			//set up the options, with data if defined
			var opts = nodeInfo[i].options.split(',');
			
			if (nodeInfo[i].data != undefined){
				//mdm.Prompt("Using " + nodeInfo[i].data);
				var data = nodeInfo[i].data.split(',');
			} else {
				//mdm.Prompt("Using " + nodeInfo[i].options);
				var data = nodeInfo[i].options.split(',');
			}
			for (var j = 0; j < opts.length; j++){
				comp.addItem({label:opts[j], data:data[j]});
			}
			
			comp.setSize(nodeInfo[i].width,22);
			comp.selectedIndex = data.findValue(obj.target.selectedNode.attributes[i]);
			comp.change = function(obj){
				this.attributes[this.att] = this.value;
			}
			ctrlY += 30;
		}
		
		if (nodeInfo[i].type.toLowerCase() == 'languagelist'){
			var comp = addComponent(ComboBox, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i });
			// Loop over all the language of languageConfig
			var idx = 0;
			for (var aNode:XMLNode=wizard.languageConfig.firstChild.firstChild; aNode != null; aNode = aNode.nextSibling)
			{
				comp.addItem({label:aNode.attributes.name, data:aNode.attributes.code});
				if (aNode.attributes.code == obj.target.selectedNode.attributes[i])
					comp.selectedIndex = idx;
				idx++;
			}
			
			comp.setSize(nodeInfo[i].width,22);
			comp.change = function(obj){
				this.attributes[this.att] = this.value;
			}
			ctrlY += 30;
		}
		
		if (nodeInfo[i].type.toLowerCase() == 'pagelist'){
			//a list of pages to link to
			var comp = addComponent(ComboBox, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i });
			
			//loop over the tree, getting page names and checking for pageIDs, creating them if they don't exist
			var names = new Array();
			var ids = new Array();
			var tempNode;
			
			for (var j = 0; j < tree.dataProvider.childNodes[0].childNodes.length; j++){
				
				tempNode = tree.dataProvider.childNodes[0].childNodes[j];
				
				//check for old pageIDs and turn them into linkIDs
				if (tempNode.attributes.pageID != undefined){
					tempNode.attributes.linkID = tempNode.attributes.pageID;
					delete tempNode.attributes.pageID;
				}
				//done checking////////////////////////////////////
				
				names.push(tempNode.attributes.name);
				ids.push(tempNode.attributes.linkID);
			}
			//add a blank entry first
			comp.addItem({label:'', data:''});
			//now build the combo box
			for (var j = 0; j < names.length; j++){
				comp.addItem({label:names[j], data: ids[j]});
			}
									
			comp.setSize(260, 22);
			comp.selectedIndex = ids.findValue(obj.target.selectedNode.attributes[i]) + 1;
			comp.change = function(obj){
				this.attributes[this.att] = this.value;
			}
			ctrlY += 30;
		}

		//numstepper
		if (nodeInfo[i].type.toLowerCase() == 'numericstepper'){

			var comp = addComponent(NumericStepper, {_x:400, _y:ctrlY, minimum:  Number(nodeInfo[i].min), maximum: Number(nodeInfo[i].max), stepSize: Number(nodeInfo[i].step), attributes: obj.target.selectedNode.attributes, att: i});

			if (nodeInfo[i].width != undefined){
				comp.setSize(Number(wizard.nfoObject.wizard[obj.target.selectedNode.nodeName][i].width),22);
			}
			
			comp.value = Number(obj.target.selectedNode.attributes[i]);
			comp.change = function(obj){
				this.attributes[this.att] = this.value;
			}
			ctrlY += 30;
		}
		
		//checkbox
		if (nodeInfo[i].type.toLowerCase() == 'checkbox'){
			var comp = addComponent(CheckBox, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i});
			
			if (obj.target.selectedNode.attributes[i] == "true"){
				comp.selected = true;
			}
			comp.click = function(obj){
				if (this.selected == true) this.attributes[this.att] = 'true';
				if (this.selected == false) this.attributes[this.att] = 'false';
			} 
			ctrlY += 30;
		}
		
		//textinput
		if (nodeInfo[i].type.toLowerCase() == 'textinput' && i != 'name'){
			var comp = addComponent(TextInput,  {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i});
			
			comp.text = attToHtml(obj.target.selectedNode.attributes[i]);
			comp.redraw();
			
			if (nodeInfo[i].width != undefined){
				comp.setSize(Number(nodeInfo[i].width),22);
			} else {
				comp.setSize(380,22);
			}

			comp.change = function(obj){
				this.attributes[this.att] = htmlToAtt(this.text);
			}
			ctrlY += 30;
		}
		
		//textArea
		if (nodeInfo[i].type.toLowerCase() == 'textarea'){
			var comp = addComponent(TextArea, {_x:400, _y:ctrlY, wordWrap:true, hScrollPolicy:'off', attributes: obj.target.selectedNode.attributes, att: i});
			
			//set the value from the node
			comp.text = attToHtml(obj.target.selectedNode.attributes[i]);
			comp.redraw();
			comp.setSize(380,nodeInfo[i].height);
			
			comp.label.highlightHTML = highlightHTML;
			comp.label.highlight = highlight;
			
			comp.label.highlight(0, comp.label.text.length);
			comp.menu = formatMenu;

			comp.change = function(obj){
				this.label.highlightHTML();
				this.attributes[this.att] = htmlToAtt(this.text);
			}
			//add to Y
			ctrlY += Number(nodeInfo[i].height) + 8;
		}
		
		//colour picker
		if (nodeInfo[i].type.toLowerCase() == 'colourpicker'){
			
			//control
			var n = wizard.controls.length;
			//var cp = wizard.container.createEmptyMovieClip('mc' + n, 1000 + n);
			//cp._x=400; cp._y=ctrlY;
			var comp = wizard.container.attachMovie('AdvColorPicker',"ctrl"+n, 1000 + n, {_x:400, _y:ctrlY, columns:21, useAdvancedColorSelector:true, attributes: obj.target.selectedNode.attributes, att: i});
			wizard.controls.push(comp);
			
			comp.color = obj.target.selectedNode.attributes[i];
			comp.direction = (ctrlY > 240 ? 'UR' : 'DR');

			comp.change = function(obj){
				this.attributes[this.att] = '0x' + this.color.toString(16);
			}
			ctrlY += 30;
		}
		
		//date chooser
		if (nodeInfo[i].type.toLowerCase() == 'datefield'){
			
			//control
			var n = wizard.controls.length;
			var comp = wizard.container.attachMovie('DateField',"ctrl"+n, 100 + n, {_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i});
			wizard.controls.push(comp);
			
			var rawData = obj.target.selectedNode.attributes[i].split('-');
			comp.selectedDate = new Date(Number(rawData[0]),Number(rawData[1]),Number(rawData[2]));

			comp.change = function(obj){
				var date = this.selectedDate;
				this.attributes[this.att] = date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate();
			}
			comp.addEventListener('change', comp);
			ctrlY += 30;
		}
		
		//DataGrid for making lists of items------------------------------------------------------------------
		if (nodeInfo[i].type.toLowerCase() == 'datagrid'){
			
			//control
			var showHeaderRow = true;
			if (nodeInfo[i].showHeaderRow == "false") {
				showHeaderRow = false;
			}
			var comp =  addComponent(DataGrid, {_x:400, _y:ctrlY, resizableColumns:true, sortableColumns:true, multipleSelection:false, showHeaders:showHeaderRow, editable:true, attributes: obj.target.selectedNode.attributes, att: i});
			comp.setSize(Number(nodeInfo[i].width), Number(nodeInfo[i].height));
			
			comp.rowCount = (comp.height - comp.headerHeight) / comp.rowHeight;
			
			
			comp.initX = comp._x;
			comp.initY = comp._y;
			comp.initW = Number(nodeInfo[i].width);
			comp.initH = Number(nodeInfo[i].height);
			comp.newRow = nodeInfo[i].newRow;
			comp.newCol = nodeInfo[i].newCol;
			
			var ctrlWidth =  Number(nodeInfo[i].width);
			
			//row height?
			if (nodeInfo[i].rowHeight != undefined){
				comp.rowHeight = Number(nodeInfo[i].rowHeight);
			}
			
			comp.rendererOptions = nodeInfo[i].rendererOptions.split(',');
			
			var numCols = nodeInfo[i].columns;
			if (nodeInfo[i].addCols == 'true') {
				numCols = attToHtml(obj.target.selectedNode.attributes[i]).split('||')[0].split('|').length;
			}
			for (var j = 0; j < numCols; j++){
				var col = comp.addColumn('col' + j);
				if (nodeInfo[i].headers.split(',').length > j) {
					comp.getColumnAt(j).headerText = nodeInfo[i].headers.split(',')[j];
				} else {
					comp.getColumnAt(j).headerText = 'col' + j;
				}
				if (nodeInfo[i].editable.split(',').length > j) {
					comp.getColumnAt(j).editable = (nodeInfo[i].editable.split(',')[j] == 1);
				} else {
					comp.getColumnAt(j).editable = true;
				}
				if (nodeInfo[i].addCols == 'true') {
					comp.getColumnAt(j).width = Number(nodeInfo[i].width)/numCols;
				} else {
					comp.getColumnAt(j).width = Number(nodeInfo[i].colWidths.split(',')[j]);
				}
				
				//cellrenderer?
				comp.rendererOptions = nodeInfo[i].rendererOptions.split(',');
				if (nodeInfo[i].cellRenderers.split(',')[j] != 'none'){
					comp.getColumnAt(j).cellRenderer = nodeInfo[i].cellRenderers.split(',')[j];
				}
			}
			
			//set the value from the node
			var t = attToHtml(obj.target.selectedNode.attributes[i]);
			var rows = t.split('||');
			for (var j = 0; j < rows.length; j++){
				
				var item = new Object();
				var row = rows[j].split('|');
				for (var k = 0; k < row.length; k++){
					item['col'+ k] = row[k];
				}
				comp.addItem(item);
			}
			
			comp.cellEdit = function() {
				var itemsStr = "";
				var counter:Array = new Array();
				
				for (var j = 0; j < this.length; j++){
					counter.push(0);
					var item = this.getItemAt(j);
					var itemArr = new Array();
					var count = 0;
					for (var k in item){
						itemArr.push(item[k]);
						count++;
					}
					for (var k = itemArr.length - 1; k >= 0; k--){
						counter.splice(j,1,counter[j]+1);
						itemsStr += itemArr[k];
						if (k > 0) itemsStr += '|';
					}
					if (j < this.length - 1) itemsStr += '||'; // end of row
				}
				this.attributes[this.att] = htmlToAtt(itemsStr);
			}
			comp.addEventListener('cellEdit', comp);
			
			ctrlY += Number(nodeInfo[i].height) + 2;
			
			//zoom control
			var n = wizard.controls.length;
			wizard.container.createClassObject(Button,"ctrl"+n, 20 + n, {label:'', icon:'icZoomIn'});
			wizard.container["ctrl"+n]._x = comp._x;
			wizard.container["ctrl"+n]._y = ctrlY;
			wizard.container["ctrl"+n].setSize(22,22);
			wizard.container["ctrl"+n].dg = comp;
			wizard.controls.push("ctrl"+n);
			
			wizard.container["ctrl"+n].click = function(){
				if (this.zoom != true){
					this.dg._x = 250;
					this.dg.setSize(540,this.dg.initH);
					this._x = 250;
					this.icon = 'icZoomOut';
					this.zoom = true;
				} else {
					this.dg._x = this.dg.initX;
					this.dg.setSize( this.dg.initW, this.dg.initH);
					this._x = 400;
					this.icon = 'icZoomIn';
					this.zoom = false;
				}

			}
			wizard.container["ctrl"+n].addEventListener('click', wizard.container["ctrl"+n]);			
			
			//add and delete buttons...
			if (nodeInfo[i].controls != "0"){
				var dg = comp;
				
				//new item button (row)
				var n = wizard.controls.length;
				wizard.container.createClassObject(Button,"ctrl"+n, 20 + n, {label:'', icon:'icAdd'});
				wizard.container["ctrl"+n]._x = dg._x + ctrlWidth - 46;
				wizard.container["ctrl"+n]._y = ctrlY;
				wizard.container["ctrl"+n].tf = wizard.container["ctrl" + (n - 1)];
				wizard.container["ctrl"+n].setSize(22,22);
				wizard.controls.push("ctrl"+n);
				
				//add handler
				wizard.container["ctrl"+n].click = function(){
					var newRow:Object = new Object();
					for (var j = 0; j < this.dg.columnCount; j++){
						var cellTxt;
						if (this.dg.newRow.split(',').length <= j) {
							cellTxt = this.dg.newCol;
						} else {
							cellTxt = this.dg.newRow.split(',')[j];
						}
						newRow[this.dg.getColumnAt(j).columnName] = cellTxt;
					}
					this.dg.addItem(newRow);
					this.dg.selectedIndex = this.dg.length;
					this.dg.cellEdit();
				}
				wizard.container["ctrl"+n].addEventListener('click', wizard.container["ctrl"+n]);
				wizard.container["ctrl"+n].dg = dg;
				
				//delete item button (row)
				var n = wizard.controls.length;
				wizard.container.createClassObject(Button,"ctrl"+n, 20 + n, {label:'', icon:'icDelete'});
				wizard.container["ctrl"+n]._x = dg._x + ctrlWidth - 22;
				wizard.container["ctrl"+n]._y = ctrlY;
				wizard.container["ctrl"+n].tf = wizard.container["ctrl" + (n - 1)];
				wizard.container["ctrl"+n].setSize(22,22);
				wizard.controls.push("ctrl"+n);
				
				//del handler
				wizard.container["ctrl"+n].click = function(){
					this.dg.removeItemAt(this.dg.selectedIndex);
					this.dg.cellEdit();
				}
				wizard.container["ctrl"+n].addEventListener('click', wizard.container["ctrl"+n]);
				wizard.container["ctrl"+n].dg = dg;
				
				addLabel("Row:", ctrlY, dg._x + ctrlWidth - 80);
			
				if (nodeInfo[i].addCols == "true") {			
					//new item button (column)
					var n = wizard.controls.length;
					wizard.container.createClassObject(Button,"ctrl"+n, 20 + n, {label:'', icon:'icAdd'});
					wizard.container["ctrl"+n]._x = dg._x + ctrlWidth - 134;
					wizard.container["ctrl"+n]._y = ctrlY;
					wizard.container["ctrl"+n].tf = wizard.container["ctrl" + (n - 1)];
					wizard.container["ctrl"+n].setSize(22,22);
					wizard.controls.push("ctrl"+n);
					
					var colNum = comp.columnCount;
					wizard.container["ctrl"+n].click = function(){
						var newCol = this.dg.addColumn("newCol" + colNum);
						colNum++;
						for (var j = 0; j < this.dg.length; j++){
							this.dg.editField(j, this.dg.getColumnAt(this.dg.columnCount-1).headerText, this.dg.newCol);
						}
						this.dg.spaceColumnsEqually();
						this.dg.cellEdit();
					}
					wizard.container["ctrl"+n].addEventListener('click', wizard.container["ctrl"+n]);
					wizard.container["ctrl"+n].dg = dg;
					
					//delete item button (column)
					var n = wizard.controls.length;
					wizard.container.createClassObject(Button,"ctrl"+n, 20 + n, {label:'', icon:'icDelete'});
					wizard.container["ctrl"+n]._x = dg._x + ctrlWidth - 110;
					wizard.container["ctrl"+n]._y = ctrlY;
					wizard.container["ctrl"+n].tf = wizard.container["ctrl" + (n - 1)];
					wizard.container["ctrl"+n].setSize(22,22);
					wizard.controls.push("ctrl"+n);
					
					wizard.container["ctrl"+n].click = function(){
						for (var j = 0; j < this.dg.length; j++){
							var item = this.dg.getItemAt(j);
							var counter = this.dg.columnCount-1;
							for (var k in item){
								if (counter == this.dg.focusedCell.columnIndex) {
									delete item[k];
								}
								counter--;
							}
						}
						this.dg.removeColumnAt(this.dg.focusedCell.columnIndex);
						this.dg.spaceColumnsEqually();
						this.dg.cellEdit();
					}
					wizard.container["ctrl"+n].addEventListener('click', wizard.container["ctrl"+n]);
					wizard.container["ctrl"+n].dg = dg;
					
					addLabel("Column:", ctrlY, dg._x + ctrlWidth - 187);
				}
			}
			//add to Y
			ctrlY += 30;
		}
		
		if (nodeInfo[i].type.toLowerCase() == 'webpage'){
			
			//is the url an expression?
			var webURL;
			if (nodeInfo[i].url.substr(0,1) == '{'){
				xmlData = KOData.toObject();
				webURL = expression(nodeInfo[i].url.substr(1, nodeInfo[i].url.length - 2), wizard);
			} else {
				webURL = nodeInfo[i].url;
			}
			
			var comp = addComponent(Button,{_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i});
			comp.label = 'Click here';
			comp.url = webURL;
			
			comp.click = function(obj){
				getURL(this.url);
			}
			
			ctrlY += comp.height + 8;
		}
		
		
		//media
		if (nodeInfo[i].type.toLowerCase() == 'media'){
						
			//control
			var comp = addComponent(TextInput,{_x:400, _y:ctrlY, attributes: obj.target.selectedNode.attributes, att: i});
			comp.text = attToHtml(obj.target.selectedNode.attributes[i]);
			comp.setSize(327,22);
			comp.change = function(obj){
				this.attributes[this.att] = htmlToAtt(this.text);
			}
			var tf = comp;
			
			//import button
			var n = wizard.controls.length;
			var comp = addComponent(Button, {_x:732, _y:ctrlY, label:'...', tf: tf});
			comp.setSize(22,22);
						
			//change handler
			comp.click = function(obj){
				//set the value on the textinput - see if any existing files re sued elsewhere and delete them
				var fileList = importMedia(this);
				
				if (xerte){
					var oldFile = "";
					if (fileList != false){
						this.tf.text = "FileLocation + 'media/" + fileList[0].substr(fileList[0].lastIndexOf('\\') + 1) + "'";
					}
					this.tf.change();
					
					if (fileList.length > 1){ //we got multiple files, so dupe out the nodes and set the properties
						for (var i = 1; i < fileList.length; i++){
							//duplicateNode();
							var dupedNode = tree.selectedNode.cloneNode(true);
							dupedNode.attributes.linkID = 'PG' + new Date().getTime();
							var parent = tree.selectedNode.parentNode;
							var currentNode = tree.selectedNode;
							parent.insertBefore(dupedNode, currentNode);
							dupedNode.nextSibling.attributes[this.tf.att] = "FileLocation + 'media/'" + fileList[0].substr(fileList[0].lastIndexOf('\\') + 1) + "'";
						}
						
						tree.dataProvider = tree.dataProvider;
						tree.selectedNode = currentNode;//?weird - it should surely be currentNode.nextSibling?
						tree.dispatchEvent({type:'change', target:tree});
					}
				}
			}
			comp.fileUploaded = function(obj){	
				
				fileList = obj.files;
				
				var oldFile = "";
				if (fileList != false){
					this.tf.text = "FileLocation + 'media/" + fileList + "'";
				}
				this.tf.change();				
				
			}
			addTooltip(comp, wizard.languageData.compMedia[0].tooltip);
			
			//preview button
			var comp = addComponent(Button,{_x:757, _y:ctrlY, icon:'icZoom', tf: tf});
			comp.setSize(22,22);
			
			comp.click = function(obj){
				initPreview(this.tf.text)
			}
			addTooltip(comp, wizard.languageData.compPreview[0].tooltip);
			
			//find media button
			/*
			if (!xerte == true){
				var comp = addComponent(Button,{_x:760, _y:ctrlY, icon:'icWorld', tf: tf, att:i});
				
				comp.setSize(22,22);
				
				comp.click = function(obj){
					
					var result_lv:LoadVars = new LoadVars();
					var send_lv:LoadVars = new LoadVars();
					mydate = new Date();
					send_lv.filename = ("XPERT_" + Math.floor(Math.random()* 1000000000)) + "_" + mydate.getSeconds() + "_image.rep";
					send_lv.filepath = _root.rlovariable;
					send_lv.attname = this.att;
					send_lv.sendAndLoad("image_stub.php", result_lv, "POST");
					
					wizard.createEmptyMovieClip('getURLHelper', 9999);
					wizard.getURLHelper.serviceprovider = "toolkits";
					wizard.getURLHelper.template = _root.rlovariable;
					wizard.getURLHelper.replace_file = send_lv.filename;
					
					//PAT IMAGE SEARCH
					wizard.getURLHelper.getURL('http://www.nottingham.ac.uk/xpert/attribution/', '_blank', 'POST');//need to pass the attribute name to the service, so you can populate the right attribute on the way back; in this code i is the attribute name, so pass i out
								
					this.myClickHandler = function (evt_obj:Object) {
						if (evt_obj.detail == Alert.YES) {
							
							setAttribute(send_lv.attname, "FileLocation + 'media/" + send_lv.filename.split('.rep').join('.jpg') + "'");
							
						}else if (evt_obj.detail == Alert.NO) {
							var delete_lv:LoadVars = new LoadVars();
							delete_lv.filename = send_lv.filename;
							delete_lv.filepath = _root.rlovariable;
							delete_lv.attname = this.att;
							delete_lv.sendAndLoad("image_stub_delete.php", result_lv, "POST");
						}
					};
	
					// Display dialog box.
					var dialog_obj:Object = Alert.show("Did you find a picture to use?", "Picture finder", Alert.YES | Alert.NO, null, this.myClickHandler, "testIcon", Alert.OK);
					
				}
				addTooltip(comp, 'Browse Images');
				
			}
			*/
			ctrlY += 30;
		}
	}
	
	//add in all potential tasks to the task list------------------------------
	var node = obj.target.selectedNode;
	if (wizard.nfoObject.wizard[node.nodeName].taskList != 'false'){
		
		if (wizard.nfoObject.wizard[node.nodeName].sortChildren == 'true'){
			node.sortChildren = true;
		}
		
		while (node.parentNode.parentNode){
			
			//the parent node name
			if (wizard.nfoObject.wizard[node.nodeName].newNodes.length > 0){
				var lbl = wizard.nfoObject.wizard[node.nodeName].menuItem != undefined ? wizard.nfoObject.wizard[node.nodeName].menuItem : node.nodeName;
				addComponent(Label, {_x: 400,_y: ctrlY, autoSize:"left", text:node.attributes.name != undefined ? node.attributes.name : lbl + ":"});
				ctrlY += 20;			
			}
			
			//the new nodes for it
			for (var i in wizard.nfoObject.wizard[node.nodeName].newNodes){
				
				if (wizard.nfoObject.wizard[i].advanced == 'true'){
					
					chkShowAdvanced.enabled = true;
					chkShowAdvanced.setTextColor(0x000000);
				}
				
				//only show advanced new nodes if...
				if (wizard.nfoObject.wizard[i].advanced != 'true' || showAdvanced){
				
					var lbl = wizard.nfoObject.wizard[i].menuItem != undefined ? wizard.nfoObject.wizard[i].menuItem : i;
					var mesg:String = wizard.languageData.newLink[0].label;
					var index:Number = mesg.indexOf("{i}");
					if (index >= 0)
					{
						mesg = mesg.substring(0, index) + lbl + mesg.substring(index+3, mesg.length);
					}
					else
					{
						mesg += lbl;					
					}
					
					if (wizard.nfoObject.wizard[i].divider == "true"){
						wizard.container.lineStyle(0,0x999999,100);
						wizard.container.moveTo(410,ctrlY);
						wizard.container.lineTo(790,ctrlY);
						ctrlY += 2;
					}
	
					var comp = addComponent(Label, {_x: 410,_y: ctrlY, text:mesg + "..."});
					comp.setSize(300,20);
					comp.setStyle("color", 0x0000FF);
					comp.treeNode = node;
					comp.insertNode = new XML(wizard.nfoObject.wizard[node.nodeName].newNodes[i]);
					
					comp.onRelease = function(){
		
						var success = validateInsert(this.treeNode, this.insertNode.firstChild.nodeName);
						if (success == true){
							var newNode = this.insertNode.firstChild;
							
							if (this.treeNode.sortChildren == true){
								//find where to add it
								insertIndex = -1;
								for (var i = 0; i < this.treeNode.childNodes.length; i++){
									if (this.treeNode.childNodes[i].nodeName == newNode.nodeName) insertIndex = i+1;
								}
								if (insertIndex != -1){
									this.treeNode.insertBefore(newNode, this.treeNode.childNodes[insertIndex]);
								} else {
									this.treeNode.appendChild(newNode);
								}
							} else {
								this.treeNode.appendChild(newNode);
							}
							
				
							tree.dataProvider = tree.dataProvider;
							tree.setIsOpen(newNode.parentNode, true);
							tree.selectedNode = newNode;
							tree.dispatchEvent({type: 'change', target: tree});
						}
					}
					comp.useHandCursor = true;
				
					ctrlY += 20;
				}
			}
			
			node = node.parentNode;
			
		}
	}
	//----------------------------------------------------------------------------------------------
	
	//finally, do the help, if it exists...
	if (nodeInfo.info != undefined){
		
		var comp = addComponent(TextArea,  {_x:250, _y:ctrlY + 20, html:true, wordWrap:true, hScrollPolicy:'off'});
		comp.setSize(540, 576 - ctrlY + 20 - 50); //to the bottom of the form
		comp.setStyle('color', 0x0066CC);
		comp.setStyle('backgroundColor', 0xE0E0E0);
		comp.setStyle('borderStyle', 'none');
		
		var helpStr = '<font color="#0066CC">' + nodeInfo.info + '</font>';
		
		//append the image src...
		if (wizard.nfoObject.wizard[obj.target.selectedNode.nodeName].info.image != undefined){
			helpStr += '<img src= "' + nodeInfo.info.image + '"/>'
		}
		comp.text = helpStr;
	}
	
	//force all controls to reset their values...
	for (var i = 0; i < wizard.controls.length; i++){
		wizard.controls[i].dispatchEvent({target:wizard.controls[i], type:'change'});
	}
	
}
//add optional properties
addPropListener = new Object();
addPropListener.click = function(obj){
	
	if (wizard.nfoObject.wizard[tree.selectedNode.nodeName][optProps.selectedItem.data].defaultValue != undefined){
		tree.selectedNode.attributes[optProps.selectedItem.data] = wizard.nfoObject.wizard[tree.selectedNode.nodeName][optProps.selectedItem.data].defaultValue;
	} else {
		tree.selectedNode.attributes[optProps.selectedItem.data] = ""
	}
	tree.dispatchEvent({target:tree, type: "change"});
}
addProp.addEventListener('click', addPropListener);

//delete optional properties
delPropListener = new Object();
delPropListener.click = function(obj){
	delete tree.selectedNode.attributes[optProps.selectedItem.label];
	tree.dispatchEvent({target:tree, type: "change"});
}
delProp.addEventListener('click', delPropListener);

function launchAnchor(link){
	var tempStr = '<html><head/><body onLoad="window.location = \'' + link + '\'"/></html>';
	tempStr = tempStr.split('\\').join('\\\\');
	mdm.FileSystem.saveFile(mdm.Application.path + "tools\\launchAnchor.htm", tempStr);
	mdm.Network.getURL(mdm.Application.path + "tools\\launchAnchor.htm");
}

function setDrawingData(xmlData){
	tree.selectedItem.firstChild.nodeValue = xmlData;
}

var formatMenu = new ContextMenu();
formatMenu.hideBuiltInItems();
formatMenu.customItems.push(new ContextMenuItem("Bold", boldText));
formatMenu.customItems.push(new ContextMenuItem("Italic", italicText));
formatMenu.customItems.push(new ContextMenuItem("Bullet", bulletText));
formatMenu.customItems.push(new ContextMenuItem("Hyperlink", linkText));
formatMenu.customItems.push(new ContextMenuItem("Page Link", pageText));
formatMenu.customItems.push(new ContextMenuItem("Mark Word", markWord));
		
function boldText(obj){
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);
		
		obj.text = preStr + '<b>' + midStr + '</b>' + postStr;
		obj.redraw();
		obj.dispatchEvent({type:"change", target:obj});
	}
}
function italicText(obj){
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);
		
		obj.text = preStr + '<i>' + midStr + '</i>' + postStr;
		obj.redraw();
		obj.dispatchEvent({type:"change", target:obj});
	}
}
function bulletText(obj){
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);
		
		obj.text = preStr + '<li>' + midStr + '</li>' + postStr;
		obj.redraw();
		obj.dispatchEvent({type:"change", target:obj});
	}
}
function linkText(obj){
	
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);
		
		
		var linkHandler = function(evt){
			if (evt.detail == Alert.OK && evt.target.input.text != ''){
				obj.text = preStr + '<a href="' + evt.target.input.text + '" target="_blank">' + midStr + '</a>' + postStr;
				obj.redraw();
				obj.dispatchEvent({type:"change", target:obj});
			}
		}
		Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
		Alert.cancelLabel = wizard.languageData.Alert[0].cancellabel[0];
		myAl = Alert.show(wizard.languageData.Alert[0].linkhandler[0].prompt[0], wizard.languageData.Alert[0].linkhandler[0].title[0], Alert.OK|Alert.CANCEL, null, linkHandler);
		myAl.createClassObject(TextInput, 'input', 999, {_x: 10, _y:37});
		myAl.input.setSize(230,22);
		myAl.setSize(250,100);

	}
}
function pageText(obj){
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);
		
		
		var linkHandler = function(evt){
			if (evt.detail == Alert.OK && evt.target.input.text != ''){
				obj.text = preStr + '<a href="asfunction:_level0.engine.rootIcon.pageLink,' + evt.target.cbo.value + '">' + midStr + '</a>' + postStr;
				
				obj.redraw();
				obj.dispatchEvent({type:"change", target:obj});
			}
		}
		
		myAl = Alert.show("", "Select Page", Alert.OK|Alert.CANCEL, null, linkHandler);
		myAl.createClassObject(ComboBox, 'cbo', 999, {_x: 10, _y:37});
		
		var names = new Array();
		var ids = new Array();
		var tempNode;
			
		for (var j = 0; j < tree.dataProvider.childNodes[0].childNodes.length; j++){
			
			tempNode = tree.dataProvider.childNodes[0].childNodes[j];
			
			//check for old pageIDs and turn them into linkIDs
			if (tempNode.attributes.pageID != undefined){
				tempNode.attributes.linkID = tempNode.attributes.pageID;
				delete tempNode.attributes.pageID;
			}
			//done checking////////////////////////////////////
			
			names.push(tempNode.attributes.name);
			ids.push(tempNode.attributes.linkID);
		}
		
		//now build the combo box
		for (var j = 0; j < names.length; j++){
			myAl.cbo.addItem({label:names[j], data: ids[j]});
		}
		
		//build a list of page titles and IDs
		myAl.cbo.setSize(230,22);
		myAl.setSize(250,100);

	}
}
function markWord(obj){
	
	var begin = Selection.getBeginIndex();
	var end = Selection.getEndIndex();
	
	if (begin != end){
		var preStr = obj.text.substr(0,begin);
		var midStr = obj.text.substr(begin, end-begin);
		var postStr = obj.text.substr(end);

		obj.text = preStr + '|' + midStr + '|' + postStr;

		obj.redraw();
		obj.dispatchEvent({type:"change", target:obj});
	}
}

treeListener.itemRollOver = function(obj){
	tree.rolledOverIndex = obj.index;
	var nodeType = tree.getNodeDisplayedAt(obj.index).nodeName;
	makeContextMenu(nodeType);
}
tree.addEventListener("itemRollOver", treeListener);

function makeContextMenu(nodeType){
	//reset the tree menu
	var treeMenu = new ContextMenu(getRightMouse);
	treeMenu.hideBuiltInItems();
	//add the new types to the menu...
	/*
	for (var i in wizard.nfoObject.wizard[nodeType].newNodes){
		treeMenu.customItems.push(new ContextMenuItem("New " + i, addNewNode));
	}
	*/
	//apply it to the tree
	dndtree.menu = treeMenu;
}
//for media from the find media service
function setAttribute(name, value){
	tree.selectedNode.attributes[name] = value;
	
	//then refresh the view
	tree.dispatchEvent({type:"change", target:tree});
}
function getRightMouse() {
	//if right mouse is clicked, we want to select the rolled-over item
	tree.selectedIndex = tree.rolledOverIndex;
	tree.dispatchEvent({type:"change", target:tree});
}
function addNewNode(obj, item){
	var newNode = item.caption.substr(4);
	var xmlStr = wizard.nfoObject.wizard[tree.selectedNode.nodeName].newNodes[newNode];
	
	tree.selectedItem.appendChild(new XML(xmlStr).firstChild);
	finishAddingNode();	
}
function finishAddingNode(){
	tree.dataProvider = tree.dataProvider;
	tree.setIsOpen(tree.selectedNode, true);
	tree.selectedNode = tree.selectedItem.getTreeNodeAt(tree.selectedItem.childNodes.length - 1);
	//fire the change event
	tree.dispatchEvent({type: 'change', target: tree});
}
function showToolTip(tip){
	wizard.attachMovie('tooltip', 'tooltip', 9999);
	wizard.tooltip._x = _xmouse;
	wizard.tooltip._y = _ymouse - 16;
	var txtFmt = new TextFormat('Verdana', 10);
	var width = txtFmt.getTextExtent(tip).width;
	wizard.tooltip.beginFill(0xFFFF99,100);
	wizard.tooltip.lineStyle(0,0x666666,100)
	wizard.tooltip.drawRect(0,0,width + 8,16);
	wizard.tooltip.tiptext.text = tip;
	wizard.tooltip.tiptext._width = width + 5;
	if (wizard.tooltip._x + wizard.tooltip._width > Stage.width){
		wizard.tooltip._x -= (wizard.tooltip._x + wizard.tooltip._width + 10) - Stage.width
	}
	clearInterval(ttID);
}

//make insertMenu
function makeInsertMenu(nodeType){
	//set up the insert menu
	insertMenu.removeAll();
	
	//add the nested menus
	var menus =  wizard.nfoObject.wizard.menus.split(',');
	for (var i = 0; i < menus.length; i++){
		insertMenu[menus[i]] = insertMenu.addMenuItem({label:menus[i]});
	}
	
	
	var sortArray = new Array();
    for (var i in wizard.nfoObject.wizard[nodeType].newNodes){
        if (wizard.nfoObject.wizard[i].menuItem != undefined){
            sortArray.push({menuItem:wizard.nfoObject.wizard[i].menuItem, node:i});
        }
        else
        {
            sortArray.push({menuItem:i, node:i});
        }
    }
    sortArray.sortOn("menuItem", Array.CASEINSENSITIVE);

    for (var n = 0; n < sortArray.length; n++){
        i = sortArray[n].node;
        //for (var i in wizard.nfoObject.wizard[nodeType].newNodes){
         if (wizard.nfoObject.wizard[i].menu != undefined){
            insertMenu[wizard.nfoObject.wizard[i].menu].addMenuItem({label:wizard.nfoObject.wizard[i].menuItem != undefined ? wizard.nfoObject.wizard[i].menuItem : i, icon:wizard.nfoObject.wizard[i].icon, data: i, thumb: wizard.nfoObject.wizard[i].thumb, hint: wizard.nfoObject.wizard[i].hint});
        } else {
            insertMenu.addMenuItem({label:wizard.nfoObject.wizard[i].menuItem != undefined ? wizard.nfoObject.wizard[i].menuItem : i, icon:wizard.nfoObject.wizard[i].icon, data: i, thumb: wizard.nfoObject.wizard[i].thumb, hint: wizard.nfoObject.wizard[i].hint});
        }
    }

	if (wizard.nfoObject.wizard[nodeType].newNodes.length > 0){
		btnInsert.enabled = true;
	} else {
		btnInsert.enabled = false;
	}
}


insertMenu = Menu.createMenu();
insertMenuListener = new Object();
insertMenuListener.change = function(obj) {
	
	clearInterval(menuInt);
	wizard.menuHelper.removeMovieClip();
	
	var newNode = obj.menuItem.attributes.data;
	
	//insertion rules
	var success = validateInsert(tree.getTreeNodeAt(0), newNode);
	
	if (success == true){
		var xmlStr = wizard.nfoObject.wizard[tree.getTreeNodeAt(0).nodeName].newNodes[newNode];
		
		if (xmlStr.indexOf('CDATA' != -1)){
			xmlStr = xmlStr.split('CDATA').join('<![CDATA[]]>');   
		}
		var node = new XML(xmlStr).firstChild;
		node.attributes.linkID = 'PG' + new Date().getTime();

		tree.getTreeNodeAt(0).appendChild(node);
		tree.dataProvider = tree.dataProvider;
		tree.setIsOpen(node.parentNode, true);
		tree.selectedNode = node;
		tree.dispatchEvent({type: 'change', target: tree});
	}
}
insertMenu.addEventListener("change", insertMenuListener);

function validateInsert(insertNode, newNode){
	//make sure we don't exceed the maximum
	success = true;

	var max = wizard.nfoObject.wizard[newNode].max;
	var numItems = 0;
	for (var i = 0; i < insertNode.childNodes.length; i++){
		if (insertNode.childNodes[i].nodeName == newNode){
			numItems++;
			if (numItems == max){
				Alert.okLabel = wizard.languageData.Alert[0].oklabel;
				var mesg:String = wizard.languageData.Alert[0].validate[0].max[0].prompt[0];
				var index:Number = mesg.indexOf("{m}");
				mesg = mesg.substring(0, index) + max + mesg.substring(index+3, mesg.length);
				index = mesg.indexOf("{i}");
				mesg = mesg.substring(0, index) + wizard.nfoObject.wizard[newNode].menuItem + mesg.substring(index+3, mesg.length);
				
				//Alert.show("You may only add " + max + " " + wizard.nfoObject.wizard[newNode].menuItem + "s", "Error");
				Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
				Alert.show(mesg, wizard.languageData.Alert[0].validate[0].max[0].title[0]);
				success = false;
				break;
			}
		}
	}
	
	if (wizard.nfoObject.wizard[insertNode.nodeName].mixedContent == "false"){
		for (var i = 0; i < insertNode.childNodes.length; i++){
			if (insertNode.childNodes[i].nodeName != newNode){
				Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
				Alert.show(wizard.languageData.Alert[0].validate[0].mixedcontent[0].prompt[0], wizard.languageData.Alert[0].validate[0].mixedcontent[0].title[0]);
				success = false;
				break;
			}
		}
	}
	return success;
}
insertMenuListener.rollOver = function(obj){
	if (obj.menuItem.attributes.thumb != undefined){
		menuInt = setInterval(showMenuHint, 1000, obj.menuItem.attributes.hint, obj.menuItem.attributes.thumb, obj.menu._x + obj.menu._width - 2, obj.menu._y, obj.menu._height);		
	}
}
insertMenu.addEventListener("rollOver", insertMenuListener);

insertMenuListener.rollOut = function(obj){
	wizard.menuHelper.removeMovieClip();
	clearInterval(menuInt);
}
insertMenu.addEventListener("rollOut", insertMenuListener);

btnInsert.click = function(){
	insertMenu.show(0,btnInsert._y + 22);
}
btnInsert.addEventListener('click', btnInsert);
addTooltip(btnInsert, 'Insert');

function showMenuHint(desc,thumb,hintX, hintY, hintH){
	

	clearInterval(menuInt);
	
	wizard.createEmptyMovieClip('menuHelper', 99);
	wizard.menuHelper._x = hintX;
	wizard.menuHelper._y = hintY;
	
	wizard.menuHelper.beginFill(0xCDFFC1,100);
	wizard.menuHelper.lineStyle(2,0xADEC93,100);
	wizard.menuHelper.drawRect(0,0,240,hintH < 320 ? 320 : hintH);
	
	wizard.menuHelper.createTextField('title',0,20,10,200,150);
	wizard.menuHelper.title.text = 'Preview';
	wizard.menuHelper.title.wordWrap = true;
	var fmt = new TextFormat('_sans', 12, 0x0B333C, true);
	wizard.menuHelper.title.setTextFormat(fmt);
	
	wizard.menuHelper.createEmptyMovieClip('thumb', 10);
	wizard.menuHelper.thumb._x = 20;
	wizard.menuHelper.thumb._y = 40;
	mcLoader = new MovieClipLoader();
	
	if (!xerte){
		path = _root.originalpathvariable;
	} else {
		path = wizard.FileLocation;
	}
	
	mcLoader.loadClip(path + thumb, wizard.menuHelper.thumb);
		
	wizard.menuHelper.createTextField('txt',2,20,210,200,150);
	wizard.menuHelper.txt.text = desc;
	wizard.menuHelper.txt.wordWrap = true;
	var fmt = new TextFormat('_sans', 12, 0x0B333C);
	wizard.menuHelper.txt.setTextFormat(fmt);

	mcLoader.onLoadInit = function(){
		//for transitions on loading
	}
	mcLoader.addListener(mcLoader);
}

//-----------------------------------------------------
btnAddChild.click = function(){
	buildTaskList(tree.selectedNode);
}
btnAddChild.addEventListener('click', btnAddChild);
addTooltip(btnAddChild, 'add some children');
//----------------------------------------------

btnDuplicate.click = function(){
	duplicateNode();
}
btnDuplicate.addEventListener('click', btnDuplicate);
addTooltip(btnDuplicate, 'Clone');

btnDelete.click = function(){
	deleteNode();
	saveFile();
}
btnDelete.addEventListener('click', btnDelete);
addTooltip(btnDelete, 'Delete');

btnMoveUp.click = function(){
	//move the tree node up
	if (tree.selectedNode.index() != 0){
		var tempNode = tree.selectedNode.cloneNode(true);
		tree.selectedNode.parentNode.insertBefore(tempNode,tree.selectedNode.previousSibling);
		tree.selectedNode.removeNode();
		
		tree.dataProvider = tree.dataProvider;
		tree.selectedNode = tempNode;
		tree.dispatchEvent({type:'change', target:tree});
	}
}
btnMoveUp.addEventListener('click', btnMoveUp);
addTooltip(btnMoveUp, 'Move Up');

btnMoveDown.click = function(){
	//move up the icon below the selected icon for ease...
	if (tree.selectedNode.index() < tree.selectedNode.parentNode.childNodes.length - 1){
		var tempNode = tree.selectedNode.cloneNode(true);
	
		if (tree.selectedNode.index() == tree.selectedNode.parentNode.childNodes.length - 2){
			tree.selectedNode.parentNode.appendChild(tempNode);
		} else {
			tree.selectedNode.parentNode.insertBefore(tempNode, tree.selectedNode.nextSibling.nextSibling);
		}
		
		tree.selectedNode.removeNode();
		
		tree.dataProvider = tree.dataProvider;
		tree.selectedNode = tempNode;
		tree.dispatchEvent({type:'change', target:tree});
	}
}
btnMoveDown.addEventListener('click', btnMoveDown);
addTooltip(btnMoveDown, 'Move Down');

btnNext.click = function(){
	nextNode();
}
btnNext.addEventListener('click', btnNext);
addTooltip(btnNext, 'Next Item');

btnPreview.click = function(){
	preview();
}
btnPreview.addEventListener('click', btnPreview);
addTooltip(btnPreview, 'Preview');

btnSave.click = function(){
	saveFile(true);
}
btnSave.addEventListener('click', btnSave);
addTooltip(btnSave, 'Save File');

btnPrev.click = function(){
	prevNode();
}
btnPrev.addEventListener('click', btnPrev);
addTooltip(btnPrev, 'Previous Item');

function addTooltip(component, tooltip){
	component.onRollOver = function(){
		ttID = setInterval(showToolTip, 500, tooltip);
	}
	component.onRollOut = function(){
		wizard.tooltip.removeMovieClip();
		clearInterval(ttID);
	}
}


function newProject(){
	//browse the templates in the xtp folder
	mdm.Dialogs.BrowseFile.title = "Please select a template";
	mdm.Dialogs.BrowseFile.defaultDirectory = mdm.Application.path+'xtp';
	mdm.Dialogs.BrowseFile.defaultExtension = "xtp";
	mdm.Dialogs.BrowseFile.dialogText = "Select a template for a new project";
	mdm.Dialogs.BrowseFile.filterList = "Xerte Template Packs|*.xtp";
	mdm.Dialogs.BrowseFile.filterText = "Xerte Template Packs|*.xtp";

	packageFile = mdm.Dialogs.BrowseFile.show();
	
	//get the folder to unzip it to
	if (packageFile != false){
		//is the folder empty?
		destFolder = mdm.Dialogs.BrowseFolder.show();
	}
	
	if (packageFile != false && destFolder != false){
		//unzip the pack into the folder...
		var files = mdm.FileSystem.getFileList(destFolder, "*.*");
		
		var createHandler = function(evt){
			if (evt.detail == Alert.OK){
 			    var fsparams = '"'+packageFile+"\",\""+destFolder+"\",\"*.*\",\"none\"";
			    fscommand("flashvnn.ExtractZip", fsparams);
			
			    intID = setInterval(openNewProject, 200);
			}
		}
		if (files.length > 0){
			Alert.noLabel = wizard.languageData.Alert[0].nolabel[0];
			Alert.yesLabel = wizard.languageData.Alert[0].yeslabel[0];
			Alert.show(wizard.languageData.Alert[0].newproject[0].prompt[0], wizard.languageData.Alert[0].newproject[0].title[0],Alert.YES|Alert.NO, null, createHandler);

			//var res = mdm.Dialogs.promptModal("That folder is not empty. Are you sure you want to use it for the new project? ", "yesno", "confirm");
		}
	}
}
function openNewProject(){
	clearInterval(intID);
    var openHandler = function(evt){
		var gloFiles = mdm.FileSystem.getFileList(destFolder, "*.rlt");
		var gloFile = destFolder + gloFiles[0];
		mdm.Forms.MainForm.callFunction('openGLO', gloFile, "|");
	}
	Alert.noLabel = wizard.languageData.Alert[0].nolabel[0];
	Alert.yesLabel = wizard.languageData.Alert[0].yeslabel[0];
	Alert.show(wizard.languageData.Alert[0].openproject[0].prompt[0], wizard.languageData.Alert[0].openproject[0].title[0], Alert.YES|Alert.NO, null, openHandler);

	//var open = mdm.Dialogs.promptModal("Do you want to open the new project?", "yesno", "confirm");
}

function initPreview(imageFile, hotspotObject){ //generic checker for all file types...
	
	imageFile = replace(imageFile, 'FileLocation', wizard.FileLocation);
	imageFile = replace(imageFile, " + '", '');
	imageFile = replace(imageFile, "'", "");
	
	if (xerte){
		
		if (!mdm.FileSystem.fileExists(imageFile)){
			Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
			Alert.show(wizard.languageData.Alert[0].initpreview[0].prompt[0], wizard.languageData.Alert[0].initpreview[0].title[0]);
			//mdm.Dialogs.prompt("You must select media before you can preview it.", "info");
			return;
		} else {
			if (imageFile.indexOf('.mp3') != -1){
				soundPreview(imageFile);
			} else if (imageFile.indexOf('.flv') != -1){
				moviePreview(imageFile);
			} else {
				imagePreview(imageFile, hotspotObject);
			} 
		}
		
	} else {
		
		var image_exists_result_lv:LoadVars = new LoadVars();
		
		image_exists_result_lv.onLoad = function(success:Boolean) {
			if (success){	
				if(image_exists_result_lv.return_value=="true"){
					
					var file = image_exists_lv.file_name;
					var hotspotObject = image_exists_lv.hotspotObject;
					
					if (file.indexOf('.mp3') != -1){
						soundPreview(file);
					} else if (file.indexOf('.flv') != -1){
						moviePreview(file);
					} else {
						imagePreview(file, hotspotObject);
					} 
				} else {
					Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
					Alert.show(wizard.languageData.Alert[0].initpreview[0].prompt[0], wizard.languageData.Alert[0].initpreview[0].title[0]);
				}
			}
		}
		
		var image_exists_lv:LoadVars = new LoadVars();
		image_exists_lv.file_name = _root.rlovariable.substr(0,_root.rlovariable.length - 6) + imageFile;
		image_exists_lv.hotspotObject = hotspotObject;
		image_exists_lv.sendAndLoad(_root.preview_path, image_exists_result_lv, "POST");

	}
}
function imagePreview(imageFile, hotspotObject){
	if (cmdWin == undefined){	
		cmdWin = PopUpManager.createPopUp(wizard, mx.containers.Window, false, {_x:10, _y:10, closeButton:true, title:'Image Inspector',contentPath:imageFile});
	
		cmdWin.setSize(10,10);
		
		cmdWinListener = new Object();
		cmdWinListener.click = function(evt) {
			wizard.cmdWin.deletePopUp();
			cmdWin.removeMovieClip();
			delete cmdWin;
		};
	
		cmdWinListener.complete = function(evt_obj:Object) {
			var scale;
			var initWidth = cmdWin.content._width;
			var initHeight = cmdWin.content._height;
			var p = cmdWin.content._width / cmdWin.content._height;
			
			if (cmdWin.content._width <= 640){
				cmdWin.setSize(cmdWin.content._width, cmdWin.content._height + 65);
				scale = 1;
			}
			if (cmdWin.content._width > 640){
				scale = 640 / initWidth;
				
				cmdWin.content._width = 640;
				cmdWin.content._height = 640 / p;
				cmdWin.setSize(640,640/p + 65);
			}
			//is it too high still?
			if (cmdWin.content._height > 550){
				scale = 550 / initHeight;
				cmdWin.content._height = 550;
				cmdWin.content._width = 550 * p;
				
				cmdWin.setSize(550*p,550 + 65);
			}
			
			cmdWin.content.onPress = fDummy;
			cmdWin.content.useHandCursor = false;
			cmdWin.setStyle('backgroundColor', 0xE0E0E0);
			cmdWin.createClassObject(Button, 'btnSave', 21, {_x:cmdWin.content._width - 90, _y: cmdWin.content._height + 35, _width:80, label:"Save", icon:'icSave'}); 

			//editable hotpot
			if (hotspotObject != undefined){
				//create movieclip for the hotspot editor
				var hs = cmdWin.createEmptyMovieClip('hs', 99);
				
				hs._x = cmdWin.content._x + (hotspotObject.x * scale);
				hs._y = cmdWin.content._y + (hotspotObject.y * scale);
				
				hs.lineStyle(0,0xFFFF00,100);
				hs.beginFill(0xFF0000,10);
				hs.drawRect(0,0, hotspotObject.w * scale, hotspotObject.h * scale);
				
				hs.onPress = function(){
					this.startDrag(false,0,0,cmdWin.content._width - this._width,cmdWin.content._height - this._height + 30);
					this.onMouseMove = function(){
						cmdWin.resizeHandle._x = this._x + this._width;
						cmdWin.resizeHandle._y = this._y + this._height;
						updateAfterEvent();
					}
				}
				hs.onRelease = hs.onReleaseOutside = function(){
					this.stopDrag();
					delete this.onMouseMove;
					hotspotObject.node.attributes.x = (this._x - cmdWin.content._x) / scale;
					hotspotObject.node.attributes.y = (this._y - cmdWin.content._y) / scale;
				}
				
				var resizeHandle = cmdWin.createEmptyMovieClip('resizeHandle', 100);
				
				resizeHandle._x = hs._x + hs._width;
				resizeHandle._y = hs._y + hs._height;
				
				resizeHandle.beginFill(0xFFFF00,100);
				resizeHandle.drawRect(-3,-3,9,9);
				
				resizeHandle.onPress = function(){
					this.startDrag(false, hs._x, hs._y,800,600);
					this.onMouseMove = function(){
						hs.clear();
						hs.lineStyle(0,0xFFFF00,100);
						hs.beginFill(0xFF0000,10);
						hs.drawRect(0,0,this._x - hs._x, this._y - hs._y);
					}
				}
				resizeHandle.onRelease = resizeHandle.onReleaseOutside = function(){
					this.stopDrag();
					delete this.onMouseMove;
					
					hotspotObject.node.attributes.w = (this._x - hs._x) / scale;
					hotspotObject.node.attributes.h = (this._y - hs._y) / scale;
				}
			}
		}
		
		cmdWin.addEventListener("click", cmdWinListener);
		cmdWin.addEventListener("complete", cmdWinListener);
		
		return cmdWin;
	}
}

function moviePreview(imageFile){
	
	if (vidWin == undefined){
	
		vidWin = PopUpManager.createPopUp(_level0, mx.containers.Window, false, {_x:10, _y:10, closeButton:true, title:'Video Preview'});
		vidWin.setSize(320,240);
		
		vidWinListener = new Object();
		vidWinListener.click = function(evt) {
			wizard.vidWin.deletePopUp();
			vidWin.removeMovieClip();
			delete vidWin;
		};
		vidWin.addEventListener("click", vidWinListener);
		
		vidWin.attachMovie('FLVPlayback', 'flvPlayer', 0);
		vidWin.flvPlayer._y = 25;
		vidWin.flvPlayer.skin = _root.flv_skin != undefined ? _root.flv_skin : 'tools/flvSkins/SteelOverAll.swf';
		
		if (xerte == true){
			vidWin.flvPlayer.contentPath = imageFile;
		} else {
			vidWin.flvPlayer.contentPath = _root.site_url + imageFile;
		}
		
		vidWin.paused = function(){
			
			System.setClipboard(String(Math.floor(this.flvPlayer.playheadTime)));
			
			if (tree.selectedNode.nodeName == 'nestedPage' && tree.selectedNode.attributes.synch != undefined){
				tree.selectedNode.attributes.synch = Math.floor(this.flvPlayer.playheadTime);
							
				for (var i = 0; i < wizard.controls.length; i++){
					if (wizard.container[wizard.controls[i]].att == 'synch'){
						wizard.container[wizard.controls[i]].value = Math.floor(this.flvPlayer.playheadTime);
					}
				}
			}
		}
		vidWin.flvPlayer.addEventListener('paused', vidWin);
		
		vidWin.ready = function(obj){
			this.setSize(obj.target.width, obj.target.height);
		}
		vidWin.flvPlayer.addEventListener('ready', vidWin);
	}
}
function soundPreview(soundFile){
	if (sndWin == undefined){
		sndWin = PopUpManager.createPopUp(_level0, mx.containers.Window, false, {_x:335, _y:250, closeButton:true, title:'Sound Inspector'});
		sndWin.setSize(130, 75);
		
		sndWinListener = new Object();
		sndWinListener.click = function(evt) {
			wizard.sndWin.deletePopUp();
			sndWin.removeMovieClip()
			delete sndWin;
		};
		sndWin.addEventListener("click", sndWinListener);
	
		//stop
		sndWin.createObject('Button', 'btnStop',10, {_x:10,_y:40,icon:'icStop'});
		sndWin.btnStop.setSize(22,22);
		
		btnStopList = new Object();
		btnStopList.click = function(){	
			sndWin.sound.pause = 0;
			sndWin.sound.stop();
			sndWin.btnPause._visible = false;
		}
		sndWin.btnStop.addEventListener('click', btnStopList);
		
		//rewind	
		sndWin.createObject('Button', 'btnRwnd',11, {_x:40,_y:40,icon:'icRwnd'});
		sndWin.btnRwnd.setSize(22,22);
		
		btnRwndList = new Object();
		btnRwndList.click = function(){	
			sndWin.sound.pause = sndWin.sound.position / 1000;
			var pauseTime = Math.floor(sndWin.sound.pause);
			System.setClipboard(pauseTime);
			sndWin.sound.stop();
			sndWin.sound.start(sndWin.sound.pause - 5);
		}
		sndWin.btnRwnd.addEventListener('click', btnRwndList);
		
		//play
		sndWin.createObject('Button', 'btnPlay',12, {_x:70,_y:40,icon:'icPlay'});
		sndWin.btnPlay.setSize(22,22);
		
		btnPlayList = new Object();
		btnPlayList.click = function(){	
			sndWin.sound.start(sndWin.sound.pause);
			sndWin.btnPause._visible = true;
		}
		sndWin.btnPlay.addEventListener('click', btnPlayList);
		
		//pause
		sndWin.createObject('Button', 'btnPause',13, {_x:70,_y:40,icon:'icPause'});
		sndWin.btnPause.setSize(22,22);
		
		btnPauseList = new Object();
		btnPauseList.click = function(){	
			sndWin.sound.pause = sndWin.sound.position / 1000;
			System.setClipboard(sndWin.sound.pause);
			if (tree.selectedNode.nodeName == 'nestedPage' && tree.selectedNode.attributes.synch != undefined){
				tree.selectedNode.attributes.synch = Math.floor(sndWin.sound.pause);
							
				for (var i = 0; i < wizard.controls.length; i++){
					if (wizard.container[wizard.controls[i]].att == 'synch'){
						wizard.container[wizard.controls[i]].value = Math.floor(sndWin.sound.pause);
					}
				}
			}
			sndWin.sound.stop();
			sndWin.btnPause._visible = false;
		}
		sndWin.btnPause.addEventListener('click', btnPauseList);
			
		//ffwd
		sndWin.createObject('Button', 'btnFfwd',14, {_x:100,_y:40,icon:'icFfwd'});
		sndWin.btnFfwd.setSize(22,22);
		
		btnFfwdList = new Object();
		btnFfwdList.click = function(){	
			sndWin.sound.pause = sndWin.sound.position / 1000;
			sndWin.sound.stop();
			sndWin.sound.start(sndWin.sound.pause + 5);
		}
		sndWin.btnFfwd.addEventListener('click', btnFfwdList);
		
		sndWin.sound = new Sound();
		sndWin.sound.loadSound(soundFile, true);
	}
}

function duplicateNode(){
	if (wizard.nfoObject.wizard[tree.selectedNode.nodeName].duplicate != 'false'){
		var dupedNode = tree.selectedNode.cloneNode(true);
		dupedNode.attributes.linkID = 'PG' + new Date().getTime();
		var parent = tree.selectedNode.parentNode;
		var currentNode = tree.selectedNode;
		
		var success = validateInsert(parent, dupedNode.nodeName);
		if (success){
			parent.insertBefore(dupedNode, currentNode);
			tree.dataProvider = tree.dataProvider;
			tree.selectedNode = currentNode;//?weird - it should surely be currentNode.nextSibling?
			tree.dispatchEvent({type:'change', target:tree});
		}

	} else {
		Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
		Alert.show(wizard.languageData.Alert[0].duplicateitem[0].prompt[0], wizard.languageData.Alert[0].duplicateitem[0].title[0]);
	}
}
function nextNode(){
	//expand this node if closed
	if (tree.selectedItem.hasChildNodes() && tree.selectedItem.firstChild.nodeType != '3'){
		tree.setIsOpen(tree.selectedNode, true);
	}
	//move down the tree
	tree.selectedIndex++;
	tree.dispatchEvent({type:'change', target:tree});
}
function prevNode(){
	if (tree.selectedIndex > 0){
		tree.selectedIndex--;// = tree.getTreeNodeAt(index);
		tree.dispatchEvent({type:'change', target:tree});
	}
}

function deleteNode(){
	//only allow deletion if it's not the last of it's type on it's parent...
	var delNodeType = tree.selectedNode.nodeName;
	var count = 0;
	
	for (var i = 0; i < tree.selectedNode.parentNode.childNodes.length; i++){
		if (tree.selectedNode.parentNode.childNodes[i].nodeName == delNodeType){
			count++

		}
	}
	
	if (count > 1 || wizard.nfoObject.wizard[delNodeType].remove == 'true'){
		
		var delNodeHandler = function(obj){
			if (obj.detail == Alert.YES){
				
				tree.selectedItem.removeNode();
				tree.dataProvider = tree.dataProvider;
				tree.selectedNode = tree.getTreeNodeAt(0);
				tree.dispatchEvent({type:'change', target:tree});
			}
		}
		Alert.yesLabel = wizard.languageData.Alert[0].yeslabel[0];
		Alert.noLabel = wizard.languageData.Alert[0].nolabel[0];
		Alert.show(wizard.languageData.Alert[0].deletenode[0].confirm[0].prompt[0], wizard.languageData.Alert[0].deletenode[0].confirm[0].title[0], Alert.YES|Alert.NO, null, delNodeHandler, null, Alert.YES);
	} else {
		Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
		Alert.show(wizard.languageData.Alert[0].deletenode[0].error[0].prompt[0], wizard.languageData.Alert[0].deletenode[0].error[0].title[0]);
	}
}


function saveFile(update){
	
	var update = (update == true ? true :  false);
	
	var str = "";
	var xmlStr = KOData.format();
	
	if (xmlStr == 'undefined' || xmlStr == undefined || xmlStr.substr(xmlStr.length - 2) != '>\r'){ //last characters should be >/r
		Alert.okLabel = wizard.languageData.Alert[0].oklabel[0];
		Alert.show(wizard.languageData.Alert[0].savefile[0].prompt[0]);
		return;
	}
	
	wizard.xmlStr = xmlStr;
	
	//now save the file
	if(!xerte){
		if(_root.read_and_write=="true"){
			var result_lv:LoadVars = new LoadVars();
			var send_lv:LoadVars = new LoadVars();
		    send_lv.filedata = wizard.xmlStr;
			send_lv.filename = wizard.fileName;
			send_lv.fileupdate = update; //update the play_XXX file or not?
			send_lv.filesize = wizard.xmlStr.length;
			send_lv.sendAndLoad(_root.savepath, result_lv, "POST");
			
			results_lv.onLoad = function(success:Boolean){
				
				wizard.createEmptyMovieClip('getURLHelper', 9999);
				wizard.getURLHelper.data = KOData.format();
				
				wizard.getURLHelper.getURL(wizard.nfoObject.wizard.runtime, "_blank", "POST");							
											   
			}
			
		}
	}else{
		fscommand('mdm.saveToFile_unicode', 'wizard.fileName,wizard.xmlStr');
	}
}

F5Listener = new Object();
F5Listener.mode = 'edit'
F5Listener.onKeyDown = function(){
	if (Key.isDown(116)){
		if (this.mode == 'edit'){ //edit mode
			this.mode = 'preview';
			//save the KO xml
			saveFile();
			//show the preview form
			mdm.form_show("preview");
			mdm.form_restore("preview");
			//fire up the piece
			mdm.form_callfunction("preview", "setMode", mode, "|");
			mdm.form_callfunction("preview", "jumpFile", wizard.rloFile, "|"); 
			
		} else { //preview mode...
			this.mode = 'edit';
			mdm.form_hide("preview");
		}
	}
}
function preview(){

	if (xerte){
		
		if (wizard.nfoObject.wizard.runtime != undefined){ //post the xml data into the url specified
		
			saveFile();
						
		} else {//play it in Xerte
		
			//if shift is down, jump straight to this page
			if (Key.isDown(Key.SHIFT)){
				if (tree.selectedNode.attributes.linkID == undefined){
					tree.selectedNode.attributes.linkID = 'PG' + new Date().getTime();
				}
				//set the linkID in _level0 of the runtime (it is deleted after onInit is fired)
				mdm.Forms.preview.callFunction("setLinkID", tree.selectedNode.attributes.linkID, "|");
			} 
			saveFile();
			
			this.mode = 'preview';

			//show the preview form
			mdm.form_show("preview");
			mdm.form_restore("preview");
			
			//fire up the piece
			mdm.form_callfunction("preview", "setMode", mode, "|");
			mdm.form_callfunction("preview", "jumpFile", wizard.rloFile, "|"); 
		}

	} else { //this is toolkits - play or post?
		
		if (wizard.nfoObject.wizard.runtime != undefined){
			
			//hardcoded in here for now - this is a bit messy, needa better way of handling multiple runtimes with all the security etc
			if (wizard.nfoObject.wizard.runtime == 'preview_site.php'){
				
				if(_root.apache!="false"){
			
					url = "preview_" + _root.template_id;
					
				}else{
					
					url = "preview.php?template_id=" + _root.template_id;
					
				}
				
				saveFile();
			
				ExternalInterface.call("hideunload");

				getURL("javascript:NewWindow = window.open('" + url + "','previewwindow','scrollbars=yes'); NewWindow.focus(); setunload(); void(0);");					
				
			} else {
			
				saveFile();
			
				wizard.createEmptyMovieClip('getURLHelper', 9999);
				wizard.getURLHelper.data = KOData.format();
				wizard.getURLHelper.getURL(wizard.nfoObject.wizard.runtime, "_blank", "POST");
			
			}
			
		} else {
			
			if (Key.isDown(Key.CONTROL)){ //play the html5 version
				
				if(_root.apache!="false"){
			
					url = "preview_" + _root.template_id + "&engine=other";
					
				}else{
					
					url = "preview.php?template_id=" + _root.template_id + "&engine=other";
					
				}
									
			} else {
				
				if(_root.apache!="false"){
			
					url = "preview_" + _root.template_id;
					
				}else{
					
					url = "preview.php?template_id=" + _root.template_id;
					
				}
			}

			//if shift is down, jump straight to this page
			if (Key.isDown(Key.SHIFT)){
							
							// First we find the top page of the currently selected node
							current_node = tree.selectedNode;
							while (current_node.parentNode.nodeName != "learningObject" && current_node.parentNode.nodeName != undefined) {
											current_node = current_node.parentNode;
							}

							// Then get the linkID or assign one...
							linkID = current_node.attributes.linkID;
							if ( linkID == undefined){
											current_node.attributes.linkID = 'PG' + new Date().getTime();
											linkID = current_node.attributes.linkID;
							}
							
							if(_root.apache!="false"){
							
											url += '_' + linkID;
							
							}else{
											
											url += '&linkID=' + linkID;
							
							}
			} 
			saveFile();

			
			ExternalInterface.call("hideunload");

			getURL("javascript:NewWindow = window.open('" + url + "','previewwindow','height=" + this.template_height+ ",width=" + this.template_width+ ",linkID=" + tree.selectedNode.attributes.linkID+ "'); NewWindow.focus(); setunload(); void(0);");					
									
		}
	}
}

function setMode() {
	//called by the preview form to set the mode and hide the preview form
	F5Listener.mode = 'edit';
}
Key.addListener(F5Listener);

function importMedia(button){
	
	
	var myFile = "";
	
	if (!xerte){ //we're on the web
	
		var allTypes:Array = new Array();
		
		var allFileTypes:Object = new Object();
		allFileTypes.description = wizard.languageData.importMedia[0].filters[0].allfiles[0]; // "All Files (*.*)";
		allFileTypes.extension = "*.*";
		allTypes.push(allFileTypes);

		var imageTypes:Object = new Object();
		imageTypes.description = wizard.languageData.importMedia[0].filters[0].images[0]; //"Images (*.jpg, *.jpeg, *.png)";
		imageTypes.extension = "*.jpg; *.jpeg; *.png";
		allTypes.push(imageTypes);

		var flashTypes:Object = new Object();
		flashTypes.description = wizard.languageData.importMedia[0].filters[0].flash[0]; // "Flash Files (*.swf)";
		flashTypes.extension = "*.swf";
		allTypes.push(flashTypes);

		var soundTypes:Object = new Object();
		soundTypes.description = wizard.languageData.importMedia[0].filters[0].sound[0]; //"Sound Files (*.mp3)";
		soundTypes.extension = "*.mp3";
		allTypes.push(soundTypes);

		var videoTypes:Object = new Object();
		videoTypes.description = wizard.languageData.importMedia[0].filters[0].video[0]; //"Video Files (*.flv)";
		videoTypes.extension = "*.flv";
		allTypes.push(videoTypes);

		var listener:Object = new Object();
		
		listener.onSelect = function(file:FileReference):Void {
			
			//create a modal window
			this.progWin = PopUpManager.createPopUp(wizard, mx.containers.Window, true, {_x:325, _y:200, closeButton:false, title:'File Upload'});
			this.progWin.createClassObject(ProgressBar, 'prgBar', 20, {_x:25, _y:40, mode:'manual', minimum:0, maximum:100});
			this.progWin.createClassObject(Button, 'btnCancel', 21, {_x:50, _y: 80, label:wizard.languageData.importMedia[0].btncancel}); 
			
			this.click = function(evt){
				this.fileRef.cancel();
				this.progWin.deletePopUp();
			}
			this.progWin.btnCancel.addEventListener('click', this);
			this.progWin.setSize(200,130);
		
			url = _root.upload_path + _root.rlovariable;
			
			//handle sesion ins firefox and safari for security
			var id = ExternalInterface.call('getSessionID');
			
			file.upload(url + '&' + id);

		};
		
		listener.onCancel = function(file:FileReference):Void  {
			trace("onCancel");
		};

		listener.onOpen = function(file:FileReference):Void  {
			trace("onOpen: "+file.name);
		};

		listener.onProgress = function(file:FileReference, bytesLoaded:Number, bytesTotal:Number):Void  {
			trace("onProgress with bytesLoaded: "+bytesLoaded+" bytesTotal: "+bytesTotal);
			this.progWin.prgBar.setProgress(bytesLoaded, bytesTotal);
		};

		listener.onComplete = function(file:FileReference):Void  {
                        var file_exists_result_lv:LoadVars = new LoadVars();

                        file_exists_result_lv.progWin = this.progWin;
                        file_exists_result_lv.onLoad = function(success:Boolean) {
                                if (success) {
                                        if (file_exists_result_lv.return_value=="true"){
												//"Upload successful"
                                                Alert.show(wizard.languageData.Alert[0].upload[0].successful[0]);

                                                button.files = file.name;
                                                button.fileUploaded(button);
                                        }
                                        else {
											//"Upload failed: Check permissions"
                                            Alert.show(wizard.languageData.Alert[0].upload[0].failed[0].permissions[0]);
                                        }
                                        this.progWin.deletePopUp();
                                }
                        }

                        var file_exists_lv:LoadVars = new LoadVars();
                        file_exists_lv.file_name = _root.rlovariable + file.name;
                        file_exists_lv.sendAndLoad(_root.preview_path, file_exists_result_lv, "POST");
                };
				
	
		listener.onHTTPError = function(file:FileReference):Void  {
			//"Upload failed: HTTPError"
			Alert.show(wizard.languageData.Alert[0].upload[0].failed[0].HTTPError[0]);
			
			trace("onHTTPError: "+file.name);
		};
		
		listener.onIOError = function(file:FileReference):Void  {
			//"Upload failed: IOError"
			Alert.show(wizard.languageData.Alert[0].upload[0].failed[0].IOError[0]);
			
			trace("onIOError: "+file.name);
		};

		listener.onSecurityError = function(file:FileReference, errorString:String):Void  {
			//"Upload failed: Security Error"
			Alert.show(wizard.languageData.Alert[0].upload[0].failed[0].security[0]);
			
			trace("onSecurityError: "+file.name+" errorString: "+errorString);
		};
		
		var fileRef = new flash.net.FileReference();
		
		
		
		listener.fileRef = fileRef;
		fileRef.addListener(listener);
		
		//allTypes
		fileRef.browse();
		
	} else {
		
		mdm.Dialogs.BrowseFile.title = wizard.languageData.importMedia[0].title[0];
		mdm.Dialogs.BrowseFile.filterList = wizard.languageData.importMedia[0].filter[0];
		mdm.Dialogs.BrowseFile.buttonText = wizard.languageData.importMedia[0].btnimport[0];;
		mdm.Dialogs.BrowseFile.defaultDirectory = wizard.mediaLocation;
		mdm.Dialogs.BrowseFile.allowMultiple = true;
		var myFile = mdm.Dialogs.BrowseFile.show();
	
		
		if (myFile != "false"){//we got some files
			//remember mediaLocation
			wizard.mediaLocation = myFile[0].substr(myFile[0].lastIndexOf('\\'));	
		
			//does the folder exist for this KO? If not make it, based on the XML file name for this KO instance...
			//ie tf1.xml -> folder called tf1 in FileLocation - even if tf1 is in a sub dir.
			if (!mdm.FileSystem.folderExists(wizard.FileLocation+'media')){
				mdm.FileSystem.makeFolder(wizard.FileLocation+'media');
			}
			
			for (i = 0; i < myFile.length; i++){
				//copy the files if they don't exist...
				var destFile = wizard.FileLocation + 'media\\' + myFile[i].substr(myFile[i].lastIndexOf('\\') + 1);
				if (mdm.FileSystem.fileExists(destFile)){
					var mesg:String = wizard.languageData.importMedia[0].fileexists[0].prompt[0];
					var index:Number = mesg.indexOf("{f}");
					mesg = mesg.substring(0, index) + destFile + mesg.substring(index+3, mesg.length);
					//var overwrite = mdm.Dialogs.promptModal("The file " + destFile + " already exists.\r\rOverwrite this file?", "yesno", "confirm")
					var overwrite = mdm.Dialogs.promptModal(mesg, "yesno", wizard.languageData.importMedia[0].fileexists[0].title[0])
					if (overwrite == "true"){
						mdm.FileSystem.copyFile(myFile[i], destFile);
						return false;
					}
				} else {
					mdm.FileSystem.copyFile(myFile[i], destFile);
				}
			}
			return myFile;
		} else {
			return false;
		}
	}
}
btnCharPad.click = function(){
	if (wizard.charPad == undefined){
	
		wizard.createEmptyMovieClip('charPad', 87);
	
		//make the character pad
		wizard.charPad.chars = new Object();
		wizard.charPad.chars.French = new Object();
		wizard.charPad.chars.French.lower = 'àâäçèéêëîïôœùûüÿ';
		wizard.charPad.chars.French.upper = 'ÀÁÄÇÈÉÊËÎÏÔŒÙÛÜŸ';
		
		wizard.charPad.chars.German = new Object();
		wizard.charPad.chars.German.lower = 'äöüß';
		wizard.charPad.chars.German.upper = 'ÄÖÜß';
		
		wizard.charPad.chars.Italian = new Object();
		wizard.charPad.chars.Italian.lower = 'àèéìòóù';
		wizard.charPad.chars.Italian.upper = 'ÀÈÉÌÒÓÙ';
		
		wizard.charPad.chars.Portuguese = new Object();
		wizard.charPad.chars.Portuguese.lower = 'àáâãçéêíóôõúü'
		wizard.charPad.chars.Portuguese.upper = 'ÀÁÂÃÇÉÊÍÓÔÕÚÜ'
		
		chars.Slovene = new Object();
		chars.Slovene.lower = 'čšž';
		chars.Slovene.upper = 'ČŠŽ';
		
		chars.Croatian = new Object();
		chars.Croatian.lower = 'čćđšž';
		chars.Croatian.upper = 'ČĆĐŠŽ';
		
		chars.Serbian = new Object();
		chars.Serbian.lower = 'čćđšž';
		chars.Serbian.upper = 'ČĆĐŠŽ';
		
		wizard.charPad.chars.Spanish = new Object();
		wizard.charPad.chars.Spanish.lower = 'áéíñóúü¿¡'
		wizard.charPad.chars.Spanish.upper = 'ÁÉÍÑÓÚÜ¿¡'
		
		wizard.charPad.chars.Polish = new Object();
		wizard.charPad.chars.Polish.lower = 'ąćęłńóśźż';
		wizard.charPad.chars.Polish.upper = 'ĄĆĘŁŃÓŚŹŻ';
		
		
		chars.Russian = new Object();
		chars.Russian.lower = 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя';
		chars.Russian.upper = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ';
	
		wizard.charPad.init = function(){
			
			this._x = 400;
			this._y = 490;
			this.clear();
		
			//make a draggable title bar
			this.createEmptyMovieClip('titleBar', 0);
			this.titleBar.beginFill(0x6699DC,100);
			this.titleBar.drawRect(0,0,180,20);
			this.titleBar.createTextField('lbl',0,0,0,120,20);
			this.titleBar.lbl.text = wizard.languageData.kblanguage[0].title;
			this.titleBar.lbl.setTextFormat(new TextFormat('Verdana', 12, 0xFFFFFF));
			this.titleBar.onPress = function(){
				this._parent.startDrag(false, 0,0,620,516);
			}
			this.titleBar.onRelease = function(){
				this._parent.stopDrag();
			}
			this.attachMovie('ComboBox', 'cboLang', 5);
			this.cboLang._x = 100;
			this.cboLang._y = 1;
			this.cboLang.setSize(78,18);
			this.cboLang.setStyle('fontSize', 10);
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[0], data:'French'});
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[1], data:'German'});
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[2], data:'Italian'});
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[3], data:'Polish'});
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[4], data:'Portuguese'});
			this.cboLang.addItem({label:wizard.languageData.kblanguage[0].item[5], data:'Spanish'});
	
			this.cboLang.change = function(evt){
				this._parent.addButtons({language: evt.target.value});
			}
			this.cboLang.addEventListener('change', this.cboLang);
	
		}
		wizard.charPad.addButtons = function(obj){
	
			//draw the panel
			this.clear();
			this.beginFill(0xFFFFFF,100);
			this.lineStyle(0,0x000000,100);
			this.drawRect(0,0,180, 46 + Math.floor((this.chars[obj.language].lower.length - 1) / 8) * 22);
			
			//delete any old buttons
			if (this.buttons != undefined){
				for (var i = 0; i < this.buttons.length; i++){
					this.buttons[i].removeMovieClip();
				}
			}
			this.buttons = new Array();
			
			for (var i = 0; i < this.chars[obj.language].lower.length; i++){
				
				this.attachMovie('Button', 'btn' + i, 100 + i);
				this.buttons.push(this['btn' + i]);
				this['btn' + i].setSize(20,20);
				this['btn' + i]._x = 3 + Math.floor(i % 8) * 22 ;
				this['btn' + i]._y = 23 + Math.floor(i / 8) * 22;
				this['btn' + i].label = this.chars[obj.language].lower.substr(i,1);
				this['btn' + i].upper = this.chars[obj.language].upper.substr(i,1);
				this['btn' + i].click = function(evt){
					Key.isDown(Key.SHIFT) ?  wizard.charPad.insert(this.upper) : wizard.charPad.insert(this.label);
				}
				this['btn' + i].addEventListener('click', this['btn' + i]);
			}
		}
	
		wizard.charPad.insert = function(char)
		{
			var t = this.currentTextField.text;
			this.currentTextField.text = t.substr(0, this.insertPoint) + char + t.substr(this.insertPoint);
			
			Selection.setFocus(this.currentTextField);
			Selection.setSelection(this.insertPoint + 1, this.insertPoint + 1);
		}
	
		wizard.charPad.onSetFocus = function()
		{
			if (eval(Selection.getFocus()).type == 'input')
			{
				this.currentTextField = eval(Selection.getFocus());
				
				this.onEnterFrame = function()
				{
					if (eval(Selection.getFocus()).type == 'input')
					{
						this.insertPoint = Selection.getCaretIndex();
					}
				}
				
				this.currentTextField.onKillFocus = function()
				{
					delete wizard.charPad.onEnterFrame;
				}
			}
		}
		Selection.addListener(wizard.charPad);
		
		wizard.charPad.init();
		wizard.charPad.addButtons({language:'French'});
	} else {
		wizard.charPad._visible = !wizard.charPad._visible;
	}
}
btnCharPad.addEventListener('click', btnCharPad);
addTooltip(btnCharPad, 'Character Pad');

//replace helper...
function replace (the_string, search_string, replace_string){	
	var found = 0;
	var pos = the_string.indexOf(search_string);
 
	while (pos>= 0) {
		found++;
		var start_string = the_string.substr(0, pos);
		var end_string = the_string.substr(pos + search_string.length);
		the_string = start_string + replace_string + end_string;
		pos = the_string.indexOf(search_string, pos + replace_string.length);
	}
	return the_string;
}	
//highlight HTML////////////////////////////////////////////////////////////////////
highlightHTML = function(font) {
	//see highlighter.fla for this code, slightly modified.
	//we only need to highlight a small section of the string around the caret
	//otherwise we call highlight with the whole string from elsewhere - when set when tree changes, or when text pasted
	var myString = this.text;
	var caret = Selection.getCaretIndex()-1;
	var start;
	var end;
	var nextOpen = myString.indexOf('<', caret);
	var nextClosed = myString.indexOf('>', caret);
	var prevOpen = myString.lastIndexOf('<', caret);
	var prevClosed = myString.lastIndexOf('>', caret);
	if (nextClosed<nextOpen || nextClosed != -1 && nextOpen == -1) {
		//in an existing tag or making a new one
		start = prevOpen;
		end = nextClosed;
	} else if (prevClosed == caret-1) {
		//just closed a tag
		start = prevOpen;
		end = prevClosed+2;
	}
	if (this.text.length>this.prevLength+1) {
		//text pasted
		this.highlight(0, this.text.length, font);
	} else {
		this.highlight(start, end, font);
	}
	//save length for checking for pastes
	this.prevLength = this.text.length;
	
};
highlight = function(start, end, font) {
	timer = getTimer();
	var myString = this.text;
	var myTag = "";
	var startIndex = start;
	var endIndex;
	var tagStart;
	var tagEnd;
	var textTF = new TextFormat(font, 12, 0x0B333C);
	var tagTF = new TextFormat(font, 12, 0x0000FF);
	var tagsAttsTF = new TextFormat(font, 12, 0xFF0000);
	var attValuesTF = new TextFormat(font, 12, 0x333333, false);
	this.setTextFormat(start, end, textTF);
	//loop through the string, and find all tags...
	while (myString.indexOf('<', startIndex) != -1 && startIndex<end) {
		startIndex = myString.indexOf('<', startIndex)+1;
		endIndex = myString.indexOf('>', startIndex);
		if (endIndex != -1) {
			//we have a complete tag...
			this.setTextFormat(startIndex-1, endIndex+1, tagTF);//blue
			this.setTextFormat(startIndex, endIndex, tagsAttsTF);//red
			this.setTextFormat(endIndex+2, myString.indexOf('<', endIndex), textTF);
			//text bewteen next tags - go through and do atts and values...
			tagStart = startIndex;
			while (myString.indexOf('"', tagStart) != -1 && tagStart<endIndex) {
				tagStart = myString.indexOf('"', tagStart)+1;
				tagEnd = myString.indexOf('"', tagStart);
				if (tagEnd != -1) {
					//we have atributes in quotes...
					this.setTextFormat(tagStart, tagEnd, attValuesTF);//black
					this.setTextFormat(tagStart-1, tagStart, tagTF);
					this.setTextFormat(tagEnd, tagEnd+1, tagTF);//blue quote marks
					this.setTextFormat(myString.indexOf('=', tagStart-3), myString.indexOf('=', tagStart-3)+1, tagTF);//blue equals signs
					tagStart = tagEnd+1;//move to next pair of quotes
				}
			}
		}
	}
	this.setNewTextFormat(textTF);
	trace(getTimer()-timer);
};
//functions for highlighting code///////////////////////////////////////////////////////////////////
highlightCode = function(){

	var myString = this.text;
	var startIndex;
	var endIndex;
	var caretIndex = Selection.getBeginIndex();//getCaretIndex();
	
	if (myString.lastIndexOf('\r', caretIndex-1) == -1) {
		//first line
		startIndex = 0;
	} else {
		startIndex = myString.lastIndexOf('\r', caretIndex-1);
	}
	if (myString.indexOf('\r', caretIndex) != -1) {
		endIndex = myString.indexOf('\r', caretIndex);
	} else {
		endIndex = myString.length;
	}
	if (this.text.length>this.prevLength+1 && !Key.isDown(Key.ENTER)) { //code pasted, because this is not an indenting
		this.highlightAllCode();
	} else {
		this.highlightSyntax(startIndex, endIndex);
	}
	this.prevLength = this.text.length;
}
function highlightSyntax(startIndex, endIndex){

	var timer = getTimer();
	var tf = this.label;
	var myString = this.text;
	var codeLine = myString.substring(startIndex, endIndex);
	
	var commentTF = new TextFormat('Courier New', 12, 0x008000, false);
	var codeTF = new TextFormat('Courier New', 12, 0x000000, false);
	var clsTF = new TextFormat('Courier New', 12, 0x008080, false);
	var strTF = new TextFormat('Courier New', 12, 0xA31515, false);
	var keyTF = new TextFormat('Courier New', 12, 0x1518FF, false);
	var numTF = new TextFormat('Courier New', 12, 0x000099, false);
	
	//set default code format
	tf.setTextFormat(startIndex, endIndex, codeTF);
	
	//syntax highlighting - find the words in the line...
	var st = startIndex;
	trace("to start " + st);
	var en = endIndex;
	var txt = this.text;
	var w = "";
	while (st<=en) {
		var l = txt.substr(st, 1);
		if (codeLookup.seperators[l]) {
			//found a seperator - reset the word
			w = "";
		} else {
			//checking the word w
			w += l;
			this.setTextFormat(st-(w.length - 1) , st+1, codeTF);
			if (codeLookup.cls[w]) {
				this.setTextFormat(st-(w.length - 1) , st+1, clsTF);
			}  else if (codeLookup.special[w]) {
				this.setTextFormat(st-(w.length - 1) , st+1, keyTF);
			} else if (!isNaN(w)) {
				this.setTextFormat(st-(w.length - 1) , st+1, numTF);
			} else {
			}
			this.setNewTextFormat(codeTF);
		}
		st++;
	}

	//double quoted strings in code...
	var strStart = startIndex;
	while (myString.indexOf('"', strStart) != -1 && strStart<endIndex) {
		strStart = myString.indexOf('"', strStart)+1;
		var strEnd = myString.indexOf('"', strStart);
		if (strEnd != -1) {
			//we have atributes in quotes...
			this.setTextFormat(strStart-1, strEnd+1, strTF);
			strStart = strEnd+1;
			//move to next pair of quotes
		} else {
			this.setTextFormat(strStart-1, endIndex, strTF);
		}
	}
	//single quoted strings
	var strStart = startIndex;
	while (myString.indexOf("'", strStart) != -1 && strStart<endIndex) {
		strStart = myString.indexOf("'", strStart)+1;
		var strEnd = myString.indexOf("'", strStart);
		if (strEnd != -1) {
			//we have atributes in quotes...
			this.setTextFormat(strStart-1, strEnd+1, strTF);
			strStart = strEnd+1;
			//move to next pair of quotes
		} else {
			this.setTextFormat(strStart-1, endIndex, strTF);
		}
	}
	//single line comments...
	if (codeLine.indexOf('//') != -1) {
		//single line comment...
		this.setTextFormat(startIndex+codeLine.indexOf('//'), endIndex, commentTF);
	}

	//over the top with multi line comments
	var cmtStart = 0;
	while (myString.indexOf("/*", cmtStart) != -1 && cmtStart<this.text.length) {
		cmtStart = myString.indexOf("/*", cmtStart)+1;
		var cmtEnd = myString.indexOf("*/", cmtStart);
		if (cmtEnd != -1) {
			//we have a multi line comment
			this.setTextFormat(cmtStart-1, cmtEnd+2, commentTF);
			cmtStart = cmtEnd+1;
			//move to next pair of quotes
		} else {
			this.setTextFormat(cmtStart-1, this.text.length, commentTF);
		}
	}

	trace("---code highghting took "+(getTimer()-timer)+" milliseconds---");
}
function highlightAllCode(){
	var timer = getTimer();
	var myString = this.text;
	var lineStart = 0;
	var lineEnd;
	var commentTF = new TextFormat('Courier New', 12, 0x808080);
	var codeTF = new TextFormat('Courier New', 12, 0x000000);
	var tf = this.label;//accord.codePane.codeEdit.label;
	if (myString.indexOf('\r', 0) == -1) {
		this.highlightSyntax(0, myString.length);
	}
	while (myString.indexOf('\r', lineStart) != -1) {
		lineEnd = myString.indexOf('\r', lineStart+1);
		if (lineEnd == -1) {
			lineEnd = this.text.length-1;
		}
		//highlight the code...
		this.highlightSyntax(lineStart, lineEnd);
		//for next time...
		lineStart = myString.indexOf('\r', lineStart)+1;
	}
	this.highlightSyntax(lineStart, myString.length);
	trace("highlighting all code took "+(getTimer()-timer)+" milliseconds");
}
function htmlToAtt(str){
	//replace all <>" in attribute content with &lt; &gt: &quot
	// Be carefull with the order!!, FIRST do the &
	var str = str.split('&').join('&amp;');
	str = str.split('<').join('&lt;');
	str = str.split('>').join('&gt;');
	str = str.split('"').join('&quot;');
	return str;
}
function attToHtml(str){
	//replace all &lt; &gt: &quot with <>" in attribute content
	// Be carefull with the order!!, FIRST do the &
	var str = str.split('&amp;').join('&');
	str = str.split('&lt;').join('<');
	str = str.split('&gt;').join('>');
	str = str.split('&quot;').join('"');

	return str;
}
function formatAtts(node){
	
	for (var i in node.attributes){
		node.attributes[i] = node.attributes[i].split('&-amp;').join('&amp;');
		node.attributes[i] = node.attributes[i].split('&-lt;').join('&lt;');
		node.attributes[i] = node.attributes[i].split('&-gt;').join('&gt;');
		node.attributes[i] = node.attributes[i].split('&-quot;').join('&quot;');
	}
 
  	//recurse through all children
	for (var i = 0; i < node.childNodes.length; i++){
		formatAtts(node.childNodes[i]);
	}

}
function toggleAdvanced(){
	showAdvanced = !showAdvanced;
	tree.dispatchEvent({type:"change", target:tree});
}
function toggleLanguage(){
	showLanguage = !showLanguage;
	tree.dispatchEvent({type:"change", target:tree});
}
function setTranslation()
{

	// Overrule all language dependent texts, now that languageData is filled.
	if (xerte)
	{
		btnSave.label = wizard.languageData.btnSaveXerte[0].label;
		addTooltip(btnSave, languageData.btnSaveXerte[0].tooltip);
	}
	else
	{
		btnSave.label = wizard.languageData.btnPublishXot[0].label;
		addTooltip(btnSave, languageData.btnPublishXot[0].tooltip);
	}
	if (xerte){
		menuBar.removeAll();
		fileMenu = menuBar.addMenu(languageData.filemenu[0].title);
		fileMenu.addMenuItem({label:languageData.filemenu[0].menuNew, icon:'icNew'});
		fileMenu.addMenuItem({type:"separator"});
		fileMenu.addMenuItem({label:languageData.filemenu[0].menuOpen, icon:'icOpen'});
		fileMenu.addMenuItem({type:"separator"});
		fileMenu.addMenuItem({label:languageData.filemenu[0].menuSave, icon:'icSave'});
		fileMenu.addMenuItem({type:"separator"});
		fileMenu.addMenuItem({label:languageData.filemenu[0].menuExit, icon:'icDelete'});
		
		fileMenuListener = new Object();
		fileMenuListener.change = function(obj) {
			if (obj.menuItem.attributes.label == languageData.filemenu[0].menuNew) {
				newProject();
			}
			if (obj.menuItem.attributes.label == languageData.filemenu[0].menuOpen) {
				mdm.Dialogs.BrowseFile.title = languageData.menuOpen[0].title;
				mdm.Dialogs.BrowseFile.defaultDirectory = mdm.System.Paths.desktop;
				mdm.Dialogs.BrowseFile.defaultExtension = "glo";
				mdm.Dialogs.BrowseFile.dialogText = languageData.menuOpen[0].dialogText;
				mdm.Dialogs.BrowseFile.filterList = languageData.menuOpen[0].filterList;
				mdm.Dialogs.BrowseFile.filterText = languageData.menuOpen[0].filterText;
		
				var fileName = mdm.Dialogs.BrowseFile.show();
				if (fileName.indexOf('.mxml') != -1){
					openMXML(fileName);
					return;
				}
				if (fileName != false){
					mdm.Forms.MainForm.callFunction('openGLO', fileName, "|");
				}
			}
			if (obj.menuItem.attributes.label == languageData.filemenu[0].menuSave) {
				saveFile();
			}
			if (obj.menuItem.attributes.label == languageData.filemenu[0].menuExit) {
				mdm.Application.exit();
			}
		}
		fileMenu.addEventListener("change", fileMenuListener);
		
		viewMenu = menuBar.addMenu(languageData.viewmenu[0].title);
		viewMenu.addMenuItem({label:languageData.viewmenu[0].menuPreview, icon:'icPreview'});
		viewMenu.addMenuItem({type:"separator"});
		
		//provide all the sections
		var sections =  wizard.nfoObject.wizard.sections.split(',');
		for (var i = 0; i < sections.length; i++){
			viewMenu.addMenuItem({label:sections[i], instanceName:"sec" + i, type:"radio", selected:false, enabled:true});
		}
		
		viewMenuListener = new Object();
		viewMenuListener.change = function(obj) {
			if (obj.menuItem.attributes.label == languageData.viewmenu[0].menuPreview) {
				preview();
			}
		}
		viewMenu.addEventListener("change", viewMenuListener);
		
			
		publishMenu = menuBar.addMenu(languageData.publishmenu[0].title);
		publishMenu.addMenuItem({label:languageData.publishmenu[0].menuPublish, icon:'icPub'});
		publishMenu.addMenuItem({type:"separator"});
		publishMenu.addMenuItem({label:languageData.publishmenu[0].menuPackage, icon:'icPackage'});
		
		publishMenuListener = new Object();
		publishMenuListener.change = function(obj) {
			if (obj.menuItem.attributes.label == languageData.publishmenu[0].menuPublish) {
				mdm.Forms.MainForm.callFunction('publish', '', '|');
			}
				
			if (obj.menuItem.attributes.label == languageData.publishmenu[0].menuPackage) {
				mdm.Dialogs.BrowseFile.title = languageData.menuPackage[0].title;
				mdm.Dialogs.BrowseFile.defaultDirectory = mdm.System.Paths.desktop;
				mdm.Dialogs.BrowseFile.defaultExtension = "zip";
				mdm.Dialogs.BrowseFile.dialogText = languageData.menuPackage[0].dialogText;
				mdm.Dialogs.BrowseFile.filterList = languageData.menuPackage[0].filterList;
				mdm.Dialogs.BrowseFile.filterText = languageData.menuPackage[0].filterText;
		
						
				var fileName = mdm.Dialogs.BrowseFile.show();
				if (fileName != false){
					mdm.Forms.MainForm.callFunction('packageSCO', fileName, '|');
				}
			}
		}
		publishMenu.addEventListener("change", publishMenuListener);
	
		
		helpMenu = menuBar.addMenu(languageData.helpmenu[0].title);
		helpMenu.addMenuItem({label:languageData.helpmenu[0].menuHelp, icon:'icHelp'});
		
		
		helpMenuListener = new Object();
		helpMenuListener.change = function(obj) {
			if (obj.menuItem.attributes.label == languageData.helpmenu[0].menuHelp) {
				mdm.prompt(languageData.menuHelp[0].prompt);
			}
		}
		helpMenu.addEventListener("change", helpMenuListener);
	}
	btnInsert.label = languageData.btnInsert[0].label;
	addTooltip(btnInsert, languageData.btnInsert[0].tooltip);
	addTooltip(btnAddChild, languageData.btnAddChild[0].tooltip);
	btnDuplicate.label = languageData.btnDuplicate[0].label;
	addTooltip(btnDuplicate, languageData.btnDuplicate[0].tooltip);
	btnDelete.label = languageData.btnDelete[0].label;
	addTooltip(btnDelete, languageData.btnDelete[0].tooltip);
	addTooltip(btnMoveUp, languageData.btnMoveUp[0].tooltip);
	addTooltip(btnMoveDown, languageData.btnMoveDown[0].tooltip);
	addTooltip(btnNext, languageData.btnNext[0].tooltip);
	btnPreview.label = languageData.btnPreview[0].label;
	addTooltip(btnPreview, languageData.btnPreview[0].tooltip);
	addTooltip(btnPrev, languageData.btnPrev[0].tooltip);
	addTooltip(btnCharPad, languageData.kblanguage[0].tooltip);
	
	addProp.label = languageData.addProp[0].label;
	optionalProp.text = languageData.optionalProp[0].label;

	chkShowAdvanced.setLabel(languageData.chkShowAdvanced[0].label);
	chkShowLanguage.setLabel(languageData.chkShowLanguage[0].label);
}

Array.prototype.findValue = function(val) {
	for (var i = 0; i<this.length; i++) {
		if (this[i] == val) {
			return i;
		}
	}
	return -1;
};

XML.prototype.toObject = XMLNode.prototype.toObject = function() {
	var $xparse = function (n) {
		var o = new String(n.firstChild.nodeValue), s, i, t;
		//vars
		for (s=(o == "null") ? n.firstChild : n.childNodes[1]; s != null; s=s.nextSibling) {
			//loop
			
			t = s.childNodes.length>0 ? arguments.callee(s) : new String(s.nodeValue);
			for (i in s.attributes) {
				t[i] = s.attributes[i];
			}
			if (o[s.nodeName] != undefined) {
				if (!(o[s.nodeName] instanceof Array)) {
					o[s.nodeName] = [o[s.nodeName]];
				}
				o[s.nodeName].push(t);
			} else {
				o[s.nodeName] = t;
				//modified from o[s.nodeName] = [t];
			}
		}
		return o;
	};
	return $xparse(this);
};

XML.prototype.toArrObject = XMLNode.prototype.toArrObject = function() {
	var $xparse = function (n) {
		var o = new String(n.firstChild.nodeValue), s, i, t;
		//vars
		for (s=(o == "null") ? n.firstChild : n.childNodes[1]; s != null; s=s.nextSibling) {
			//loop
			
			t = s.childNodes.length>0 ? arguments.callee(s) : new String(s.nodeValue);
			for (i in s.attributes) {
				t[i] = s.attributes[i];
			}
			if (o[s.nodeName] != undefined) {
				if (!(o[s.nodeName] instanceof Array)) {
					o[s.nodeName] = [o[s.nodeName]];
				}
				o[s.nodeName].push(t);
			} else {
				o[s.nodeName] = [t];
				//modified from o[s.nodeName] = [t];
			}
		}
		return o;
	};
	return $xparse(this);
};

XMLNode.prototype.index = function() {
	for (var i = 0; i<this.parentNode.childNodes.length; i++) {
		if (this.parentNode.childNodes[i] == this) {
			return i;
		}
	}
	return -1;
};
XML.prototype.__proto__.format = function(t) {

	var a,i,s;
	
	if (t == undefined){
		t = '\t';
	}
	
	if(this.nodeName == null) {
		s = this.firstChild.format(t);
		return s;
	}
	s = "<"+this.nodeName;
	for(a in this.attributes) {
		s += " "+a+"=\""+this.attributes[a]+"\"";
	}
	if(!this.hasChildNodes()) {
		s += " />";
		return t + s + "\r";//newline;
	}
	s += ">";
	if(this.firstChild.nodeType == 3) {
		s += '<![CDATA[' + this.firstChild.nodeValue + ']]>';
	}
	else {
		s += "\r";//newline;
		for(i = 0; i < this.childNodes.length; i++) {
			s += this.childNodes[i].format(t+"\t");
		}
		s += t;
	}
	s += "</"+this.nodeName+">";
	return t + s + "\r";//newline;
}
MovieClip.prototype.drawRect = function(x, y, w, h) {
	//simplified for brevity from usual fn that takes a corner radius - never called that way here
	this.moveTo(x, y);
	this.lineTo(x+w, y);
	this.lineTo(x+w, y+h);
	this.lineTo(x, y+h);
	this.lineTo(x, y);
};
//web based pieces need kicking off
if (!xerte && _root.xmlvariable != undefined){
	init(_root.xmlvariable,_root.rlovariable, _root.languagecodevariable);
}

codeLookup = new Object();

codeLookup.seperators = new Object();
codeLookup.seperators['.'] = true;
codeLookup.seperators[' '] = true;
codeLookup.seperators['='] = true;
codeLookup.seperators['=='] = true;
codeLookup.seperators[';'] = true;
codeLookup.seperators[':'] = true;
codeLookup.seperators[','] = true;
codeLookup.seperators['*'] = true;
codeLookup.seperators['\r'] = true;
codeLookup.seperators['\n'] = true;
codeLookup.seperators['\t'] = true;
codeLookup.seperators['('] = true;
codeLookup.seperators[')'] = true;
codeLookup.seperators['['] = true;
codeLookup.seperators[']'] = true;
codeLookup.seperators['<'] = true;
codeLookup.seperators['>'] = true;
codeLookup.seperators['+'] = true;
codeLookup.seperators['-'] = true;
codeLookup.seperators['|'] = true;
codeLookup.seperators['~'] = true;
codeLookup.seperators['*'] = true;
codeLookup.seperators['&'] = true;
codeLookup.seperators['?'] = true;
codeLookup.seperators['%'] = true;

codeLookup.special = new Object();
//reserved words in javascript
codeLookup.special['boolean'] = true;
codeLookup.special['break'] = true;
codeLookup.special['byte'] = true;
codeLookup.special['case'] = true;
codeLookup.special['catch'] = true;
codeLookup.special['char'] = true;
codeLookup.special['class'] = true;
codeLookup.special['continue'] = true;
codeLookup.special['const'] = true;
codeLookup.special['default'] = true;
codeLookup.special['delete'] = true;
codeLookup.special['do'] = true;
codeLookup.special['double'] = true;
codeLookup.special['else'] = true;
codeLookup.special['false'] = true;
codeLookup.special['finalfinally'] = true;
codeLookup.special['float'] = true;
codeLookup.special['for'] = true;
codeLookup.special['function'] = true;
codeLookup.special['if'] = true;
codeLookup.special['in'] = true;
codeLookup.special['instanceof'] = true;
codeLookup.special['int'] = true;
codeLookup.special['is'] = true;
codeLookup.special['long'] = true;
codeLookup.special['namespace'] = true;
codeLookup.special['new'] = true;
codeLookup.special['null'] = true;
codeLookup.special['return'] = true;
codeLookup.special['short'] = true;
codeLookup.special['switch'] = true;
codeLookup.special['this'] = true;
codeLookup.special['throw'] = true;
codeLookup.special['true'] = true;
codeLookup.special['try'] = true;
codeLookup.special['typeof'] = true;
codeLookup.special['var'] = true;
codeLookup.special['void'] = true;
codeLookup.special['while'] = true;
codeLookup.special['with'] = true;
//global properties
codeLookup.special['infinity'] = true;
codeLookup.special['NaN'] = true;
codeLookup.special['undefined'] = true;
//global methods
codeLookup.special['decodeURI'] = true;
codeLookup.special['decodeURIComponent'] = true;
codeLookup.special['encodeURI'] = true;
codeLookup.special['encodeURIComponent'] = true;
codeLookup.special['eval'] = true;
codeLookup.special['isFinite'] = true;
codeLookup.special['isNaN'] = true;
codeLookup.special['parsefloat'] = true;
codeLookup.special['parseint'] = true;
//window
codeLookup.special['closed'] = true;
codeLookup.special['Components'] = true;
codeLookup.special['content'] = true;
codeLookup.special['controllers'] = true;
codeLookup.special['crypto'] = true;
codeLookup.special['defaultstatus'] = true;
codeLookup.special['directories'] = true;
codeLookup.special['document'] = true;
codeLookup.special['frames'] = true;
codeLookup.special['history'] = true;
codeLookup.special['innerHeight'] = true;
codeLookup.special['innerWidth'] = true;
codeLookup.special['length'] = true;
codeLookup.special['location'] = true;
codeLookup.special['locationbar'] = true;
codeLookup.special['menubar'] = true;
codeLookup.special['name'] = true;
codeLookup.special['navigator'] = true;
codeLookup.special['opener'] = true;
codeLookup.special['outerHeight'] = true;
codeLookup.special['outerWidth'] = true;
codeLookup.special['pageXOffset'] = true;
codeLookup.special['pageYOffset'] = true;
codeLookup.special['parent'] = true;
codeLookup.special['personalbar'] = true;
codeLookup.special['pkcs11'] = true;
codeLookup.special['prompter'] = true;
codeLookup.special['screen'] = true;
codeLookup.special['screenX'] = true;
codeLookup.special['screenY'] = true;
codeLookup.special['scrollbars'] = true;
codeLookup.special['scrollX'] = true;
codeLookup.special['scrollY'] = true;
codeLookup.special['self'] = true;
codeLookup.special['statusbar'] = true;
codeLookup.special['toolbar'] = true;
codeLookup.special['top'] = true;
codeLookup.special['window'] = true;
//methods
codeLookup.special['alert'] = true;
codeLookup.special['back'] = true;
codeLookup.special['blur'] = true;
codeLookup.special['captureevents'] = true;
codeLookup.special['clearinterval'] = true;
codeLookup.special['cleartimeout'] = true;
codeLookup.special['close'] = true;
codeLookup.special['confirm'] = true;
codeLookup.special['dump'] = true;
codeLookup.special['escape'] = true;
codeLookup.special['focus'] = true;
codeLookup.special['forward'] = true;
codeLookup.special['getAttention'] = true;
codeLookup.special['getSelection'] = true;
codeLookup.special['home'] = true;
codeLookup.special['moveBy'] = true;
codeLookup.special['moveTo'] = true;
codeLookup.special['open'] = true;
codeLookup.special['print'] = true;
codeLookup.special['prompt'] = true;
codeLookup.special['releaseevents'] = true;
codeLookup.special['resizeBy'] = true;
codeLookup.special['resizeTo'] = true;
codeLookup.special['scroll'] = true;
codeLookup.special['scrollBy'] = true;
codeLookup.special['scrollByLines'] = true;
codeLookup.special['scrollByPages'] = true;
codeLookup.special['scrollTo'] = true;
codeLookup.special['setCursor'] = true;
codeLookup.special['setinterval'] = true;
codeLookup.special['settimeout'] = true;
codeLookup.special['sizeToContents'] = true;
codeLookup.special['stop'] = true;
codeLookup.special['unescape'] = true;
codeLookup.special['updateCommands'] = true;
//events
codeLookup.special['onabort'] = true;
codeLookup.special['onblur'] = true;
codeLookup.special['onchange'] = true;
codeLookup.special['onclick'] = true;
codeLookup.special['onclose'] = true;
codeLookup.special['ondragdrop'] = true;
codeLookup.special['onerror'] = true;
codeLookup.special['onfocus'] = true;
codeLookup.special['onkeydown'] = true;
codeLookup.special['onkeypress'] = true;
codeLookup.special['onkeyup'] = true;
codeLookup.special['onload'] = true;
codeLookup.special['onmousedown'] = true;
codeLookup.special['onmousemove'] = true;
codeLookup.special['onmouseout'] = true;
codeLookup.special['onmouseover'] = true;
codeLookup.special['onmouseup'] = true;
codeLookup.special['onpaint'] = true;
codeLookup.special['onreset'] = true;
codeLookup.special['onresize'] = true;
codeLookup.special['onscroll'] = true;
codeLookup.special['onselect'] = true;
codeLookup.special['onsubmit'] = true;
codeLookup.special['onunload'] = true;

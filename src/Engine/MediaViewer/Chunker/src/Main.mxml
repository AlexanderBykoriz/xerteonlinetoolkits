<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:components="components.*"
					   width="800" height="600"
					   creationComplete="setUp();">
	
	<fx:Script>
		
		<![CDATA[
		
		import components.CaptionBlock;
		import components.CreatePanel;
		import components.ExtendedNativeWindow;
		import components.MediaPanel;
		import components.Mp3Player;
		import components.PreviewPanel;
		import components.TranscriptPanel;
		import components.XMLPanel;
		import flash.display.NativeWindowInitOptions;
		import flash.events.Event;
		import flash.events.KeyboardEvent;
		import flash.events.MouseEvent;
		import flash.events.TimerEvent;
		import flash.filesystem.File;
		import flash.filesystem.FileStream;
		import flash.net.FileFilter;
		import flash.utils.Timer;
		import mx.controls.Alert;
		import mx.controls.Image;
		import mx.core.ByteArrayAsset;
		import mx.events.CloseEvent;
		import org.osmf.events.MediaPlayerStateChangeEvent;
		import org.osmf.events.TimeEvent;
		import org.osmf.media.MediaPlayerState;
		import spark.components.Label;
		import spark.components.TextArea;
		import spark.components.ToggleButton;
		import spark.components.VGroup;
		import spark.components.VideoPlayer;
		import spark.events.TextOperationEvent;
		
		
		[Bindable] private var currentStep:Number = 0;
		[Bindable] private var stepInstructions:Array = new Array(	"Select a piece of media and load or paste in the transcript",
																	"Separate each transcript caption onto its own line.  Click the Confirm button when done.\nTo automatically separate your transcript by sentences click the Split Sentences button",
																	"Start the media playing. Press SPACE at the beginning of each chunk.",
																	"The timed transcript is shown below for you to copy or save.\n Click Preview Media to check the timings of your captions against your media file.");
		
		[Bindable] private var mediaPanel:MediaPanel = new MediaPanel;
		private var transcriptPanel:TranscriptPanel = new TranscriptPanel();
		private var xmlPanel:XMLPanel = new XMLPanel();
		private var createPanel:CreatePanel = new CreatePanel();
		
		public  var mediaType:String;
		private var videoPlayer:VideoPlayer = new VideoPlayer();
		private var audioPlayer:Mp3Player = new Mp3Player();
		private var audioImg:Image = new Image();
		
		private var subStrings:Array = new Array();
		private var currentCaption:Number = 0;
		private var timings:Array = new Array();
		
		[Embed(source="docs/open.xml", mimeType="application/octet-stream")] private var openFileClass:Class;
		private var openFileByteArray:ByteArrayAsset = ByteArrayAsset(new openFileClass());
		private var openXML:String = openFileByteArray.readUTFBytes(openFileByteArray.length);
		
		[Embed(source="docs/close.xml", mimeType="application/octet-stream")] private var closeFileClass:Class;
		private var closeFileByteArray:ByteArrayAsset = ByteArrayAsset(new closeFileClass());
		private var closeXML:String = closeFileByteArray.readUTFBytes(closeFileByteArray.length);
		
		
		// function sets up initial panels
		private function setUp():void {
			topGroup.addElement(mediaPanel);
			topGroup.addElement(transcriptPanel);
			transcriptPanel.minHeight = mediaPanel.mediaHolder.height;
			xmlPanel.enabled = false;
			mainGroup.addElement(xmlPanel);
			sortCurrentStep(0);
		}
		
		// function sorts out panel buttons enabled in each step
		private function sortCurrentStep(step:Number):void {
			currentStep = step;
			mediaPanel.mediaBtn.enabled = true;
			if (mediaType == "audio") {
				mediaPanel.imageBtn.enabled = true;
			} else {
				mediaPanel.imageBtn.enabled = false;
			}
			if (currentStep == 0) {
				transcriptPanel.textBtn.enabled = true;
				transcriptPanel.splitBtn.enabled = false;
				transcriptPanel.confirmBtn.enabled = false;
			} else if (currentStep == 1) {
				transcriptPanel.textBtn.enabled = true;
				transcriptPanel.splitBtn.enabled = true;
				transcriptPanel.confirmBtn.enabled = true;
			} else if (currentStep == 2) {
				transcriptPanel.textBtn.enabled = false;
				transcriptPanel.splitBtn.enabled = false;
				transcriptPanel.confirmBtn.enabled = false;
				xmlPanel.copyBtn.enabled = false;
				xmlPanel.restartBtn.enabled = false;
				xmlPanel.saveBtn.enabled = false;
				addMediaListeners();
			} else if (currentStep == 3) {
				xmlPanel.copyBtn.enabled = true;
				xmlPanel.restartBtn.enabled = true;
				xmlPanel.saveBtn.enabled = true;
				createPanel.setUp();
			}
		}
		
		// function opens window to browse for media / transcript files
		private var fileToOpen:File;
		private var fileType:String;
		public function browseForFile(type:String):void {
			fileType = type;
			var fileFilter:FileFilter;
			if (fileType == "save") {
				fileToOpen = File.documentsDirectory.resolvePath("transcript.xml");
				fileToOpen.browseForSave("Save As");
				fileToOpen.addEventListener(Event.SELECT, fileSaved);
			} else {
				fileToOpen = File.documentsDirectory;
				if (fileType == "media") {
					fileFilter = new FileFilter("Media Files", "*.flv;*.mp3;*.mp4");
				} else if (fileType == "text") {
					fileFilter = new FileFilter("Text Documents", "*.txt");
				} else if (fileType == "image") {
					fileFilter = new FileFilter("Image Files", "*.jpg;*.jpeg;*.png");
				}
				fileToOpen.browseForOpen("Open", [fileFilter]);
				fileToOpen.addEventListener(Event.SELECT, fileSelected);
			}
		}
		
		// function saves timed transcript xml file
		private function fileSaved(event:Event):void {
			var file:File = File(event.target);
			var stream:FileStream = new FileStream();
			stream.open(file, FileMode.WRITE);
			stream.writeUTFBytes(xmlPanel.outputTxtBox.text);
			stream.close();
		}
		
		// function called when file selected - if media/image file it creates component, if txt file it reads & loads text
		private function fileSelected(event:Event):void {
			if (fileType == "media") { // media file
				mediaPanel.blankBtn.visible = false;
				if (mediaPanel.mediaInfoHolder.numElements > 0) {
					mediaPanel.mediaInfoHolder.removeAllElements();
					mediaPanel.mediaInfoHolder.gap = 5;
					audioImg = new Image();
				}
				if (fileToOpen.type == ".flv" || fileToOpen.type == '.mp4') {
					mediaType = "video";
					addMedia(fileToOpen.nativePath, "", mediaPanel.mediaInfoHolder);
				} else {
					mediaType = "audio";
					addMedia(fileToOpen.nativePath, fileToOpen.name, mediaPanel.mediaInfoHolder);
					mediaPanel.mediaHolder.width = 300;
					mediaPanel.mediaHolder.height = mediaPanel.mediaHolder.titleDisplay.height + 60;
				}
				if (textChg == true && currentStep == 0) {
					sortCurrentStep(1);
				} else {
					sortCurrentStep(currentStep);
				}
				
			} else if (fileType == "text") { // text file
				var results:String;
				var file:File = new File(fileToOpen.nativePath);
				var fs:FileStream = new FileStream();
				fs.open(file,FileMode.READ);
				fs.position = 0;
				results = fs.readUTFBytes(Math.min(int.MAX_VALUE-0,fs.bytesAvailable));
				fs.close();
				var textBox:TextArea = TextArea(transcriptPanel.inputTxtBox);
				textBox.text = results;
				textBox.removeEventListener("change", textChanged);
				textChg = true;
				if (mediaPanel.mediaInfoHolder.numElements > 0 && currentStep == 0) {
					sortCurrentStep(1);
				}
				
			} else { // image file
				audioImg.source = fileToOpen.nativePath;
				mediaPanel.mediaInfoHolder.addElementAt(audioImg, 0);
				mediaPanel.mediaInfoHolder.paddingTop = 0;
				mediaPanel.mediaInfoHolder.gap = 0;
				audioPlayer.width = 299;
				mediaPanel.mediaHolder.width = 300;
				audioImg.addEventListener(Event.INIT, imgLoaded); // scales image
				if (mediaPanel.mediaInfoHolder.getElementAt(1) is Label) {
					mediaPanel.mediaInfoHolder.removeElementAt(1);
				}
			}
		}
		
		// function loads media into target component
		private function addMedia(mediaPath:String, mediaTitle:String, target:VGroup):Mp3Player {
			if (mediaType == "video") {
				mediaPanel.mediaInfoHolder.paddingTop = 0;
				videoPlayer.source = mediaPath;
				videoPlayer.autoPlay = false;
				videoPlayer.addEventListener("mediaPlayerStateChange", videoLoaded); // scales video
				videoPlayer.setStyle("dropShadowVisible", false);
				target.addElement(videoPlayer);
				return undefined;
				
			} else {
				target.paddingTop = 10;
				audioPlayer.source = mediaPath;
				audioPlayer.width = 289;
				if (mediaTitle != "") {
					var label:Label = new Label();
					label.text = mediaTitle;
					label.width = 299;
					label.setStyle("textAlign", "center");
					target.addElement(label);
				}
				target.addElement(audioPlayer);
				audioPlayer.pause();
				return audioPlayer;
			}
		}
		
		// function called when text area changed manually
		private var textChg:Boolean = false;
		public function textChanged(event:TextOperationEvent):void {
			event.target.removeEventListener("change", textChanged);
			textChg = true;
			if (mediaPanel.mediaInfoHolder.numElements > 0 && currentStep == 0) {
				sortCurrentStep(1);
			}
		}
		
		// function called from clearBtn - clears transcript text box
		public function clearText():void {
			var textBox:TextArea = new TextArea();
			if (currentStep < 2) {
				textBox = TextArea(transcriptPanel.inputTxtBox);
				textBox.text = "Enter transcript text here";
				textChg = false;
				sortCurrentStep(0);
			} else {
				if (firstPlay == 0) {
					transcriptPanel.captionGroup.removeAllElements();
					transcriptPanel.inputTxtBox.visible = true;
					transcriptPanel.inputTxtBox.text = "Enter transcript text here";
					textChg = false;
					if (mediaType == "video") {
						mediaPanel.mediaInfoHolder.getElementAt(0).removeEventListener("mediaPlayerStateChange", videoPlaying);
						mediaPanel.mediaInfoHolder.getElementAt(0).removeEventListener("complete", videoFinished);
					} else {
						audioPlayPauseButton.removeEventListener(MouseEvent.CLICK, audioPlaying);
						audioListener = false;
					}
					sortCurrentStep(0);
				} else {
					Alert.show("Clearing the transcript text now will also delete any timed transcript you have made.\n\nDo you want to clear the text?", "Warning:", 3, this, clearAlertAnswer);
					if (mediaType == "video") {
						videoPlayer.pause();
					} else {
						audioPlayer.pause();
					}
				}
			}
		}
		
		// function called from clear transcript warning alert
		private function clearAlertAnswer(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				restart();
				clearText();
			} else {
				this.stage.focus = null;
			}
		}
		
		// function does automatic split on "." and strips out blank space at beginning of sentences
		public function splitSentences():void {
			var textBox:TextArea = TextArea(transcriptPanel.inputTxtBox);
			var origString:String = textBox.text;
			var newString:String = "";
			newString = origString.split(/[.!?]/).join('\n');
			newString = newString.split(/\n\s+/).join('\n');
			newString = newString.split(/\n\n+/).join('\n');
			textBox.text = newString;
		}
		
		// function removes white space at beginning & end of strings
		private function stripWhiteSpace(string:String):String {
			var newString:String = "";
			var i:Number;
 			for (i = 0; i < string.length; i++) {
				if (string.charAt(i) != " ") {
					newString = string.slice(i, string.length);
					break;
				}
			}
			string = newString;
			for (i = 0; i < string.length; i++) {
				if (string.charAt(string.length - 1 - i) != " ") {
					newString = string.slice(0, string.length - i);
					break;
				}
			}
			return newString;
		}
		
		// function splits text into captions by "\n" and strips out empty captions
		// captions that are just whitespace aren't stripped out again as these could be used to usefully add gaps in transcript
		public function splitText():void {
			var textBox:TextArea = TextArea(transcriptPanel.inputTxtBox);
			var origString:String = textBox.text;
			subStrings = origString.split("\n");
			var i:Number;
			for (i = 0; i < subStrings.length; i++) {
				var exit:Number = 0;
				while (exit == 0) {
					if (subStrings[i] == "") {
						subStrings.splice(i, 1);
					} else {
						exit = 1;
					}
				}
			}
			transcriptPanel.inputTxtBox.visible = false;
			transcriptPanel.inputTxtBox.text = "";
			
			for (i = 0; i < subStrings.length; i++) {
				createComponent(i);
			}
			sortCurrentStep(2);
		}
		
		// function creates CaptionBlock components in captionGroup
		private function createComponent(index:Number):void {
			var newComponent:CaptionBlock = new CaptionBlock();
			newComponent.myText.text = subStrings[index];
			newComponent.myHighlightAlpha = "1";
			newComponent.myTxtAlpha = "1";
			newComponent.myText.addEventListener("change", captionChanged);
			newComponent.addEventListener(MouseEvent.ROLL_OVER, captionRollOver);
			newComponent.addEventListener(MouseEvent.ROLL_OUT, captionRollOut);
			newComponent.addBtn.addEventListener(MouseEvent.CLICK, addCaption);
			newComponent.deleteBtn.addEventListener(MouseEvent.CLICK, deleteCaption);
			transcriptPanel.captionGroup.addElementAt(newComponent, index);
		}
		
		// functions for CaptionBlocks (text changed / rollovers etc.)
		private function captionChanged(event:TextOperationEvent):void {
			var instance:Number = event.target.parent.parent.getChildIndex(event.target.parent);
			subStrings.splice(instance, 1, event.target.text);
		}
		private function captionRollOver(event:MouseEvent):void {
			event.target.addBtn.visible = true;
			event.target.deleteBtn.visible = true;
		}
		private function captionRollOut(event:MouseEvent):void {
			event.target.addBtn.visible = false;
			event.target.deleteBtn.visible = false;
		}
		private function deleteCaption(event:MouseEvent):void {
			var instance:Number = event.target.parent.parent.parent.getChildIndex(event.target.parent.parent);
			transcriptPanel.captionGroup.removeElement(event.target.parent.parent);
			subStrings.splice(instance, 1);
		}
		private function addCaption(event:MouseEvent):void {
			var index:Number = event.target.parentDocument.parent.getChildIndex(event.target.parentDocument);
			subStrings.splice(index, 0, " ");
			createComponent(index);
		}
		
		// function controls whether CaptionBlocks are editable
		private function setCaptionEdit(edit:Boolean):void {
			var i:Number;
			for (i = 0; i < transcriptPanel.captionGroup.numChildren; i++) {
				var caption:CaptionBlock = CaptionBlock(transcriptPanel.captionGroup.getElementAt(i));
				caption.myText.editable = edit;
				if (edit == false) {
					caption.removeEventListener(MouseEvent.ROLL_OVER, captionRollOver);
					caption.removeEventListener(MouseEvent.ROLL_OUT, captionRollOut);
				} else {
					caption.addEventListener(MouseEvent.ROLL_OVER, captionRollOver);
					caption.addEventListener(MouseEvent.ROLL_OUT, captionRollOut);
				}
				var j:Number;
				for (j = 0; j < caption.btnBar.numElements; j++) {
					Image(caption.btnBar.getElementAt(j)).visible = false;
				}
			}
		}
		
		// function sets up listeners for media play / pause / finish
		private function addMediaListeners():void {
			if (mediaType == "video") {
				mediaPanel.mediaInfoHolder.getElementAt(0).addEventListener("mediaPlayerStateChange", videoPlaying);
				mediaPanel.mediaInfoHolder.getElementAt(0).addEventListener("complete", videoFinished);
				videoPlayer.stop();
			} else {
				audioPlayPauseButton.addEventListener(MouseEvent.CLICK, audioPlaying);
				audioListener = true;
				audioPlayer.pause();
				audioPlayer.rewind();
			}
		}
		
		// function triggered when video play/pause button is clicked
		private function videoPlaying(event:MediaPlayerStateChangeEvent):void {
			if (event.state == MediaPlayerState.PLAYING) {
				mediaPlaying();
			} else if (event.state == MediaPlayerState.PAUSED) {
				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			}
		}
		
		// function triggered when audio play/pause button is clicked
		public var audioPlayPauseButton:ToggleButton;
		private function audioPlaying(event:MouseEvent):void {
			if (event.target.selected == true) {
				mediaPlaying();
			} else {
				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			}
		}
		
		// function called from 2 functions above
		private var firstPlay:Number = 0;
		private function mediaPlaying():void {
			mediaPanel.mediaBtn.enabled = false;
			mediaPanel.imageBtn.enabled = false;
			xmlPanel.restartBtn.enabled = true;
			this.stage.focus = null; // removes focus from play button so it's no longer controlled by space bar
			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			if (firstPlay == 0) {
				xmlPanel.outputTxtBox.text = "";
				firstPlay = 1;
			}
			highlightCaptions();
			xmlPanel.enabled = true;
			setCaptionEdit(false);
		}
		
		// function triggered when the video plays to the end
		private function videoFinished(event:TimeEvent):void {
			if (firstPlay != 0) {
				mediaPanel.mediaInfoHolder.getElementAt(0).removeEventListener("complete", videoFinished);
				mediaFinished();
			}
		}
		
		// function triggered when the audio plays to the end
		private var audioListener:Boolean = false;
		public function audioFinished(event:Event):void {
			if (audioListener == true) {
				audioListener = false;
				mediaFinished();
			}
		}
		
		// function checks if all captions have been added
		private function mediaFinished():void {
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			var time:String;
			if (mediaType == "video") {
				time = String(videoPlayer.currentTime);
			} else {
				time = String(Math.round(audioPlayer.myChannel.position) / 1000);
			}
			if (currentCaption == subStrings.length) {
				if (timings.length == subStrings.length) {
					if (stripWhiteSpace(subStrings[currentCaption - 1]) != "") {
						xmlPanel.outputTxtBox.text += " end='" + time + "'>" + subStrings[currentCaption - 1] + "</P>";
						xmlPanel.outputTxtBox.scrollToRange(xmlPanel.outputTxtBox.text.length - 1, xmlPanel.outputTxtBox.text.length);
					}
					timings.push(time);
				}
				xmlPanel.outputTxtBox.text += "\n" + closeXML;
				transcriptComplete(true);
				
			} else {
				if (currentCaption > 0 && stripWhiteSpace(subStrings[currentCaption - 1]) != "") {
					xmlPanel.outputTxtBox.text += " end='" + time + "'>" + subStrings[currentCaption - 1] + "</P>";
					xmlPanel.outputTxtBox.scrollToRange(xmlPanel.outputTxtBox.text.length - 1, xmlPanel.outputTxtBox.text.length);
					timings.push(time);
				}
				if (timings.length != 0) {
					xmlPanel.outputTxtBox.text += "\n" + closeXML;
				} else {
					
				}
				transcriptComplete(false);
			}
		}
		
		// function triggered when media is playing and space bar pressed
		// it gets current media time and moves highlight to next transcript chunk
		private function keyPress(event:KeyboardEvent):void {
			if (event.charCode == 32) {
				var time:String;
				if (mediaType == "video") {
					time = String(videoPlayer.currentTime);
				} else {
 					time = String(Math.round(audioPlayer.myChannel.position) / 1000);
				}
				
				if (currentCaption < subStrings.length) {
					if (stripWhiteSpace(subStrings[currentCaption]) == "") {
						if (xmlPanel.outputTxtBox.text != "" && stripWhiteSpace(subStrings[currentCaption - 1]) != "") {
							xmlPanel.outputTxtBox.text += " end='" + time + "'>" + subStrings[currentCaption - 1] + "</P>";
						}
					} else {
						if (xmlPanel.outputTxtBox.text == "") {
							xmlPanel.outputTxtBox.text = openXML + "\n      <P begin='" + time + "'";
						} else {
							if (stripWhiteSpace(subStrings[currentCaption - 1]) != "") {
								xmlPanel.outputTxtBox.text += " end='" + time + "'>" + subStrings[currentCaption - 1] + "</P>";
								if (timings.length != subStrings.length && stripWhiteSpace(subStrings[currentCaption]) != "") {
									xmlPanel.outputTxtBox.text += "\n      <P begin='" + time + "'";
								}
							} else {
								xmlPanel.outputTxtBox.text += "\n      <P begin='" + time + "'";
							}
						}
					}
					timings.push(time);
					xmlPanel.outputTxtBox.scrollToRange(xmlPanel.outputTxtBox.text.length - 1, xmlPanel.outputTxtBox.text.length);
				} else if (currentCaption == subStrings.length) {
					if (stripWhiteSpace(subStrings[currentCaption - 1]) != "") {
						xmlPanel.outputTxtBox.text += " end='" + time + "'>" + subStrings[currentCaption - 1] + "</P>";
					}
					xmlPanel.outputTxtBox.text += "\n" + closeXML;
					timings.push(time);
					transcriptComplete(true);
				}
				
				currentCaption++;
				highlightCaptions();
			}
		}
		
		// function controls highlights on caption chunks while media playing
		private function highlightCaptions():void {
			var i:Number;
			for (i = 0; i < transcriptPanel.captionGroup.numChildren; i++) {
				var captionBlock:CaptionBlock = CaptionBlock(transcriptPanel.captionGroup.getElementAt(i));
				if (firstPlay == 0) {
					captionBlock.myHighlightAlpha = "1";
					captionBlock.myTxtAlpha = "1";
				} else {
					if (i == currentCaption-1) {
						captionBlock.myHighlightAlpha = "1";
						captionBlock.myTxtAlpha = "1";
					} else {
						captionBlock.myHighlightAlpha = "0";
						if (i < currentCaption-1) {
							captionBlock.myTxtAlpha = "0.5";
						}
					}
				}
			}
			if (currentCaption != 0  && currentCaption <= transcriptPanel.captionGroup.numElements) {
				if (CaptionBlock(transcriptPanel.captionGroup.getElementAt(currentCaption - 1)).y > transcriptPanel.height / 3) {
					var yDif:Number = CaptionBlock(transcriptPanel.captionGroup.getElementAt(currentCaption - 1)).y - (transcriptPanel.height / 3);
					transcriptPanel.captionGroup.verticalScrollPosition = yDif;
				}
			} else if (currentCaption == 0) {
				transcriptPanel.captionGroup.verticalScrollPosition = 0;
			}
		}
		
		// function called from restartBtn
		public function restartChunking():void {
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			if (mediaType == "video") {
				videoPlayer.pause();
			} else {
				audioPlayer.pause();
			}
			Alert.show("Restarting the chunking now will delete any timed transcript you have already made.\n\nDo you want to continue?", "Warning:", 3, this, restartAlertAnswer);
		}
		
		// function called from clear transcript warning alert
		private function restartAlertAnswer(event:CloseEvent):void {
			if (event.detail == Alert.YES) {
				restart();
				addMediaListeners();
			} else {
				this.stage.focus = null;
				stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			}
		}
		
		// function restarts chunking - removes timed text already done, rewinds media & brings back transcript panel if not there
		private function restart():void {
			currentCaption = 0;
			timings.splice(0, timings.length);
			firstPlay = 0;
			if (mediaType == "video") {
				videoPlayer.stop();
			} else {
				audioPlayer.pause();
				audioPlayer.rewind();
			}
			xmlPanel.outputTxtBox.text = "Timed transcript will load here";
			xmlPanel.enabled = false;
			
			if (currentStep == 3) {
				oldHeight = createPanel.height;
				topGroup.removeElement(createPanel);
				transcriptPanel.inputTxtBox.visible = false;
				transcriptPanel.inputTxtBox.text = "";
				topGroup.addElement(transcriptPanel);
				xmlPanel.height += oldHeight - transcriptPanel.height;
			}
			
			setCaptionEdit(true);
			highlightCaptions();
			sortCurrentStep(2);
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
		}
		
		// function called when all captions added to transcript
		private var oldHeight:Number = 0;
		private var firstTry:Boolean = true;
		private function transcriptComplete(allAdded:Boolean):void {
			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyPress);
			if (mediaType == "video") {
				mediaPanel.mediaInfoHolder.getElementAt(0).removeEventListener("mediaPlayerStateChange", videoPlaying);
				mediaPanel.mediaInfoHolder.getElementAt(0).removeEventListener("complete", videoFinished);
				videoPlayer.stop();
			} else {
				audioPlayPauseButton.removeEventListener(MouseEvent.CLICK, audioPlaying);
				audioListener = false;
				audioPlayer.pause();
				audioPlayer.rewind();
			}
			
			oldHeight = transcriptPanel.height;
			topGroup.removeElement(transcriptPanel);
			topGroup.addElement(createPanel);
			createPanel.setValues();
			createPanel.minHeight = mediaPanel.mediaHolder.height;
			if (firstTry == true) {
				firstTry = false;
				createPanel.addEventListener("creationComplete", resizePanel);
			} else {
				xmlPanel.height += oldHeight - createPanel.height;
			}
			
			xmlPanel.outputTxtBox.editable = true;
			sortCurrentStep(3);
			
			if (allAdded == false) {
				Alert.show("You have not added every caption to the timed transcript.\n\nTo start again, click the 'Restart Chunking' button.", "Warning:");
			} else {
				xmlPanel.outputTxtBox.scrollToRange(0, 1);
			}
		}
		
		private function resizePanel(event:Event):void {
			createPanel.removeEventListener("creationComplete", resizePanel);
			xmlPanel.height += oldHeight - createPanel.height;
		}
		
		// function called by createPanel when caption settings are changed
		public function captionSettingChg(event:Event):void {
			var oldXML:String = xmlPanel.outputTxtBox.text;
			var newData:String;
			if (event.type == "close") {
				newData = event.target.selectedItem.data;
			} else if (event.type == "change") {
				if (event.target.id == "highlight") {
					newData = event.target.selected;
				} else {
					var hexColour:String = event.target.selectedColor.toString(16);
					hexColour = hexColour.toUpperCase();
					while(hexColour.length < 6) {
						hexColour = '0' + hexColour;
					}
					newData = "0x" + hexColour;
				}
			}
			xmlPanel.outputTxtBox.text = oldXML.substring(0, oldXML.indexOf(event.target.id + '="')) + event.target.id + '="' + newData + '"' + oldXML.substring(oldXML.indexOf('"', (oldXML.indexOf(event.target.id + '="') + event.target.id.length + 2)) + 1, oldXML.length);
			
			var newXML:String = xmlPanel.outputTxtBox.text;
			if (event.target.id == "timing" || event.target.id == "position") {
				var currentTiming:String = newXML.substring(newXML.indexOf('timing="') + 8, newXML.indexOf('" position='));
				var currentPosition:String = newXML.substring(newXML.indexOf('position="') + 10, newXML.indexOf('"/>'));
				if (currentTiming != "current" && (currentPosition == "top" || currentPosition == "bottom")) {
					createPanel.error.text = "* Subtitles can only be viewed one caption at a time.";
					createPanel.positionError.visible = true;
					createPanel.timingError.visible = true;
				} else {
					createPanel.error.text = "";
					createPanel.positionError.visible = false;
					createPanel.timingError.visible = false;
				}
			}
		}
		
		// function opens new window containing content preview
		private var popup:ExtendedNativeWindow;
		private var opts:NativeWindowInitOptions = new NativeWindowInitOptions();
		public function preview():void {
			popup = new ExtendedNativeWindow(opts);
			popup.width = 300;
			popup.height = 300;
			popup.title = "Media Preview";
			var previewPanel:PreviewPanel = new PreviewPanel();
			if (mediaType == "video") {
				previewPanel.mediaName = String(videoPlayer.source);
			} else {
				previewPanel.mediaName = audioPlayer.source;
				previewPanel.imgFile = String(audioImg.source);
			}
			var xmlString:String = xmlPanel.outputTxtBox.text;
			previewPanel.xml = XML(xmlString);
			popup.addEventListener(Event.CLOSING, previewPanel.stopMedia);
			popup.addChildControls(previewPanel);
			popup.activate();
		}
		
		// function copies text in XMLPanel to clipboard
		public function copyText():void {
			System.setClipboard(xmlPanel.outputTxtBox.text);
		}
		
		public function create():void {
			Alert.show("This option not currently available", "Coming soon...");
		}
		
		// function added as sometimes adjustVideoSize was called while dimensions were still 0
		private var videoWidthTimer:Timer = new Timer(1);
		private function checkVideoWidthTimer(event:TimerEvent):void {
			if (videoPlayer.videoObject.videoWidth != 0 && videoPlayer.videoObject.videoHeight != 0) {
				videoWidthTimer.stop();
				adjustVideoSize();
			}
		}
		
		// function called when video loaded
		private function videoLoaded(event:MediaPlayerStateChangeEvent):void {
			if (event.state == MediaPlayerState.PAUSED) {
				adjustVideoSize();
				videoPlayer.removeEventListener("mediaPlayerStateChange", videoLoaded);
			}
		}
		
		// function scales loaded videos to fit & panel to fit video
		private function adjustVideoSize():void {
			if (videoPlayer.videoObject.videoWidth == 0 || videoPlayer.videoObject.videoWidth == 0) {
				videoWidthTimer.addEventListener(TimerEvent.TIMER, checkVideoWidthTimer);
				videoWidthTimer.start();
			} else {
				var maxW:Number = 298;
				var maxH:Number = 298;
				var minW:Number = 263;
				var barH:Number = 24;
				var currentW:Number = videoPlayer.videoObject.videoWidth;
				var currentH:Number = videoPlayer.videoObject.videoHeight;
				if (currentW > maxW) {
					videoPlayer.height = (currentH / (currentW / maxW)) + barH;
					videoPlayer.width = maxW;
					currentW = videoPlayer.width;
					currentH = videoPlayer.height;
				} else if (currentW < minW) {
					videoPlayer.height = (currentH / (currentW / (maxW - 2))) + barH;
					videoPlayer.width = maxW - 2;
					currentW = videoPlayer.width;
					currentH = videoPlayer.height;
				}
				if (currentH > maxH) {
					videoPlayer.width = (currentW / (currentH / maxH));
					videoPlayer.height = maxH;
					currentW = videoPlayer.width;
					currentH = videoPlayer.height;
				}
				mediaPanel.blankBtn.x = videoPlayer.x + videoPlayer.width - videoPlayer.fullScreenButton.width;
				mediaPanel.blankBtn.y = videoPlayer.y + videoPlayer.height - videoPlayer.fullScreenButton.height;
				mediaPanel.blankBtn.visible = true;
				videoPlayer.fullScreenButton.visible = false;	
				mediaPanel.mediaHolder.width = currentW + 2;
				mediaPanel.mediaHolder.height = currentH + mediaPanel.mediaHolder.titleDisplay.height + 3;
			}
		}
		
		// function scales loaded images to fit & panel to fit image
		private function imgLoaded(event:Event):void {
			audioImg.width = audioImg.contentWidth;
			audioImg.height = audioImg.contentHeight;
			var maxW:Number = audioPlayer.width;
			var maxH:Number = 298 - audioPlayer.height - mediaPanel.mediaHolder.titleDisplay.height;
			if (audioImg.width > maxW) {
				audioImg.height = audioImg.height * (maxW / audioImg.width);
				audioImg.width = maxW;
			}
			if (audioImg.height > maxH) {
				audioImg.width = audioImg.width * (maxH / audioImg.height);
				audioImg.height = maxH;
			}
			mediaPanel.mediaHolder.height = mediaPanel.mediaHolder.titleDisplay.height + audioImg.height + 26;
			if (audioImg.width < audioPlayer.width) {
				if (audioImg.width < 250) {
					audioPlayer.width = 250;
				} else {
					audioPlayer.width = audioImg.width;
				}
				mediaPanel.mediaHolder.width = audioPlayer.width + 1;
			}
		}
		
		]]>
		
	</fx:Script>
	
	<s:VGroup id="mainGroup"
		x="10" y="10"
		width="{this.width-20}" >
		
		<s:TextArea id="instructionTxt"
			percentWidth="100" height="40"
			borderVisible="false"
			editable="false"
			text="{'Step ' + (currentStep + 1) + ': ' + stepInstructions.getItemAt(currentStep)}"
		/>
		
		<s:HGroup id="topGroup"
			percentWidth="100" minHeight="{mediaPanel.mediaHolder.height}">
			
			<!-- ** MediaPanel is loaded here ** -->
			
			<!-- ** TranscriptPanel and CreatePanel are loaded here ** -->
			
		</s:HGroup>
		
		<!-- ** XMLPanel is loaded here ** -->
		
	</s:VGroup>
	
</s:WindowedApplication>